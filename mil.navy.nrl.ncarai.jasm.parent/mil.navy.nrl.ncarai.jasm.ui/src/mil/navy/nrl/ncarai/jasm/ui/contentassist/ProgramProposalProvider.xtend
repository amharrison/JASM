/*
 * generated by Xtext 2.19.0
 */
package mil.navy.nrl.ncarai.jasm.ui.contentassist

import javax.inject.Inject
import mil.navy.nrl.ncarai.jasm.program.Pattern
import mil.navy.nrl.ncarai.jasm.program.VariableReference
import mil.navy.nrl.ncarai.jasm.program.VariableStatement
import mil.navy.nrl.ncarai.jasm.program.VariableValue
import mil.navy.nrl.ncarai.jasm.validation.ValidationUtilities
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class ProgramProposalProvider extends AbstractProgramProposalProvider {

  @Inject extension ValidationUtilities
  @Inject IImageHelper _imageHelper

  override completeVariableReference_Name(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {
    if (model instanceof VariableReference) {
      val contents = inferBufferContents(model)
      val chunkType = contents.get(model.buffer)
      if (chunkType !== null) {
        val slotsOf = chunkType.slotsOf
        for (slot : slotsOf)
          acceptor.accept(createCompletionProposal(slot, slot, _imageHelper.getImage('basic/slot.gif'), context))
      }
    }
  }

  override completeVariableValue_Value(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {
    if (model instanceof VariableValue) {
      if (model.buffer !== null) {
        val contents = inferBufferContents(model)
        val chunkType = contents.get(model.buffer)
        if (chunkType !== null) {
          val slotsOf = chunkType.slotsOf
          for (slot : slotsOf)
            acceptor.accept(createCompletionProposal(slot, slot, _imageHelper.getImage('basic/slot.gif'), context))
        }
      }
    }
  }

  override completeConditionalSlot_Name(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {
    val pattern = EcoreUtil2.getContainerOfType(model, Pattern)
    if (pattern !== null) {
      val chunkType = getChunkType(pattern, pattern.type)
      if (chunkType !== null) {
        val slotsOf = chunkType.slotsOf
        for (slot : slotsOf)
          acceptor.accept(createCompletionProposal(slot, slot, _imageHelper.getImage('basic/slot.gif'), context))
      }
    }
  }

  override completePattern_Type(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {
    model.functionTable.keySet.forEach [ function |
      acceptor.accept(
        createCompletionProposal(function, function, _imageHelper.getImage('basic/chunktype.gif'), context))
    ]

    model.chunkTypeTable.keySet.forEach [ chunkType |
      acceptor.accept(
        createCompletionProposal(chunkType, chunkType, _imageHelper.getImage('basic/chunktype.gif'), context))
    ]
  }

  override completeConditionalSlot_Value(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {
    val chunks = model.chunkTable
    for (chunk : chunks.keySet)
      acceptor.accept(createCompletionProposal(chunk, chunk, _imageHelper.getImage("basic/chunk.gif"), context))
//    super.completeConditionalSlot_Value(model, assignment, context, acceptor)
  }
  
  override completeVariableValue_FunctionCall(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    //silence
  }
  
  

  override completeVariableValue_Buffer(EObject model, Assignment assignment, ContentAssistContext context,
    ICompletionProposalAcceptor acceptor) {

    val assmnt = EcoreUtil2.getContainerOfType(model, VariableStatement)
    if (assmnt === null) {
      model.functionTable.keySet.forEach [ function |
        acceptor.accept(
          createCompletionProposal(function, function, _imageHelper.getImage('basic/chunktype.gif'), context))
      ]
    }

    val buffers = model.bufferTable
    for (buffer : buffers.keySet)
      acceptor.accept(createCompletionProposal(buffer, buffer, _imageHelper.getImage('basic/buffer.gif'), context))

    val chunks = model.chunkTable
    for (chunk : chunks.keySet)
      acceptor.accept(createCompletionProposal(chunk, chunk, _imageHelper.getImage("basic/chunk.gif"), context))
  }

//  override completeSimpleSlot_Name(EObject model, Assignment assignment, ContentAssistContext context,
//    ICompletionProposalAcceptor acceptor) {
//    val chunks = EcoreUtil2.getContainerOfType(model, Chunks)
//    if (chunks !== null) {
//      val chunkType = chunks.type
//      if (chunkType !== null) {
//        val slotsOf = chunkType.slotsOf
//        for (slot : slotsOf)
//          acceptor.accept(createCompletionProposal(slot, slot, null, context))
//      }
//    }
//  }
//  
//  override completeSimpleSlot_Value(EObject model, Assignment assignment, ContentAssistContext context,
//    ICompletionProposalAcceptor acceptor) {
//    val chunks = chunkSymbolTable(model)
//    for (chunk : chunks.keySet)
//      acceptor.accept(createCompletionProposal(chunk, chunk, _imageHelper.getImage("basic/chunk.gif"), context))
//    super.completeSimpleSlot_Value(model, assignment, context, acceptor)
//  }
//
//  override completeConditionalSlot_Value(EObject model, Assignment assignment, ContentAssistContext context,
//    ICompletionProposalAcceptor acceptor) {
//    val chunks = chunkSymbolTable(model)
//    for (chunk : chunks.keySet)
//      acceptor.accept(createCompletionProposal(chunk, chunk, _imageHelper.getImage("basic/chunk.gif"), context))
//    super.completeConditionalSlot_Value(model, assignment, context, acceptor)
//  }
}
