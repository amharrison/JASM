/*
 * generated by Xtext 2.19.0
 */
package mil.navy.nrl.ncarai.jasm.ui.quickfix

import javax.inject.Inject
import mil.navy.nrl.ncarai.jasm.program.BufferPattern
import mil.navy.nrl.ncarai.jasm.program.Function
import mil.navy.nrl.ncarai.jasm.program.PackageDef
import mil.navy.nrl.ncarai.jasm.program.ProgramFactory
import mil.navy.nrl.ncarai.jasm.validation.ValidationUtilities
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.diagnostics.Diagnostic
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class ProgramQuickfixProvider extends DefaultQuickfixProvider {

  @Inject extension ValidationUtilities

  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
  def createPatternIssue(Issue issue, IssueResolutionAcceptor acceptor) {
    if (issue.message.indexOf("Pattern") != -1)
      acceptor.accept(issue, "Create missing pattern", "Create missing pattern", null) [ element, context |
        val doc = context.xtextDocument
        val badName = doc.get(issue.offset, issue.length)

        val newPattern = ProgramFactory.eINSTANCE.createPattern
        newPattern.name = badName

        // find the function containing this reference
        val function = EcoreUtil2.getContainerOfType(element, Function)
        val bufferPattern = EcoreUtil2.getContainerOfType(element, BufferPattern)
        if (bufferPattern !== null) {
          val contents = inferBufferContents(element)
          val chunkType = contents.get(bufferPattern.buffer)
          if (chunkType !== null)
            newPattern.type = chunkType.name
          else
            newPattern.type = function.name
        } else
          newPattern.type = function.name

        // insert after
        EcoreUtil2.getContainerOfType(function, PackageDef).patterns.add(newPattern)
      ]
  }
//	@Fix(ProgramValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
