/**
 * generated by Xtext 2.19.0
 */
package mil.navy.nrl.ncarai.jasm.ui.contentassist;

import com.google.common.collect.LinkedListMultimap;
import java.util.HashMap;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Consumer;
import javax.inject.Inject;
import mil.navy.nrl.ncarai.jasm.program.Pattern;
import mil.navy.nrl.ncarai.jasm.program.VariableReference;
import mil.navy.nrl.ncarai.jasm.program.VariableStatement;
import mil.navy.nrl.ncarai.jasm.program.VariableValue;
import mil.navy.nrl.ncarai.jasm.ui.contentassist.AbstractProgramProposalProvider;
import mil.navy.nrl.ncarai.jasm.validation.ValidationUtilities;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;
import org.jactr.io2.jactr.modelFragment.Buffer;
import org.jactr.io2.jactr.modelFragment.ChunkType;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class ProgramProposalProvider extends AbstractProgramProposalProvider {
  @Inject
  @Extension
  private ValidationUtilities _validationUtilities;
  
  @Inject
  private IImageHelper _imageHelper;
  
  @Override
  public void completeVariableReference_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof VariableReference)) {
      final HashMap<Buffer, ChunkType> contents = this._validationUtilities.inferBufferContents(model);
      final ChunkType chunkType = contents.get(((VariableReference)model).getBuffer());
      if ((chunkType != null)) {
        final TreeSet<String> slotsOf = this._validationUtilities.slotsOf(chunkType);
        for (final String slot : slotsOf) {
          acceptor.accept(this.createCompletionProposal(slot, slot, this._imageHelper.getImage("basic/slot.gif"), context));
        }
      }
    }
  }
  
  @Override
  public void completeVariableValue_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    if ((model instanceof VariableValue)) {
      Buffer _buffer = ((VariableValue)model).getBuffer();
      boolean _tripleNotEquals = (_buffer != null);
      if (_tripleNotEquals) {
        final HashMap<Buffer, ChunkType> contents = this._validationUtilities.inferBufferContents(model);
        final ChunkType chunkType = contents.get(((VariableValue)model).getBuffer());
        if ((chunkType != null)) {
          final TreeSet<String> slotsOf = this._validationUtilities.slotsOf(chunkType);
          for (final String slot : slotsOf) {
            acceptor.accept(this.createCompletionProposal(slot, slot, this._imageHelper.getImage("basic/slot.gif"), context));
          }
        }
      }
    }
  }
  
  @Override
  public void completeConditionalSlot_Name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final Pattern pattern = EcoreUtil2.<Pattern>getContainerOfType(model, Pattern.class);
    if ((pattern != null)) {
      final ChunkType chunkType = this._validationUtilities.getChunkType(pattern, pattern.getType());
      if ((chunkType != null)) {
        final TreeSet<String> slotsOf = this._validationUtilities.slotsOf(chunkType);
        for (final String slot : slotsOf) {
          acceptor.accept(this.createCompletionProposal(slot, slot, this._imageHelper.getImage("basic/slot.gif"), context));
        }
      }
    }
  }
  
  @Override
  public void completePattern_Type(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final Consumer<String> _function = (String function) -> {
      acceptor.accept(
        this.createCompletionProposal(function, function, this._imageHelper.getImage("basic/chunktype.gif"), context));
    };
    this._validationUtilities.functionTable(model).keySet().forEach(_function);
    final Consumer<String> _function_1 = (String chunkType) -> {
      acceptor.accept(
        this.createCompletionProposal(chunkType, chunkType, this._imageHelper.getImage("basic/chunktype.gif"), context));
    };
    this._validationUtilities.chunkTypeTable(model).keySet().forEach(_function_1);
  }
  
  @Override
  public void completeConditionalSlot_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final LinkedListMultimap<String, IEObjectDescription> chunks = this._validationUtilities.chunkTable(model);
    Set<String> _keySet = chunks.keySet();
    for (final String chunk : _keySet) {
      acceptor.accept(this.createCompletionProposal(chunk, chunk, this._imageHelper.getImage("basic/chunk.gif"), context));
    }
  }
  
  @Override
  public void completeVariableValue_FunctionCall(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
  }
  
  @Override
  public void completeVariableValue_Buffer(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    final VariableStatement assmnt = EcoreUtil2.<VariableStatement>getContainerOfType(model, VariableStatement.class);
    if ((assmnt == null)) {
      final Consumer<String> _function = (String function) -> {
        acceptor.accept(
          this.createCompletionProposal(function, function, this._imageHelper.getImage("basic/chunktype.gif"), context));
      };
      this._validationUtilities.functionTable(model).keySet().forEach(_function);
    }
    final LinkedListMultimap<String, IEObjectDescription> buffers = this._validationUtilities.bufferTable(model);
    Set<String> _keySet = buffers.keySet();
    for (final String buffer : _keySet) {
      acceptor.accept(this.createCompletionProposal(buffer, buffer, this._imageHelper.getImage("basic/buffer.gif"), context));
    }
    final LinkedListMultimap<String, IEObjectDescription> chunks = this._validationUtilities.chunkTable(model);
    Set<String> _keySet_1 = chunks.keySet();
    for (final String chunk : _keySet_1) {
      acceptor.accept(this.createCompletionProposal(chunk, chunk, this._imageHelper.getImage("basic/chunk.gif"), context));
    }
  }
}
