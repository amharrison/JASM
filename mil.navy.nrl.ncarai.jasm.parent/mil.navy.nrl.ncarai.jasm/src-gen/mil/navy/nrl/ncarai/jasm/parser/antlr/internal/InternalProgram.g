/*
 * generated by Xtext 2.20.0
 */
grammar InternalProgram;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package mil.navy.nrl.ncarai.jasm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package mil.navy.nrl.ncarai.jasm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import mil.navy.nrl.ncarai.jasm.services.ProgramGrammarAccess;

}

@parser::members {

 	private ProgramGrammarAccess grammarAccess;

    public InternalProgramParser(TokenStream input, ProgramGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ProgramGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProgramAccess().getPackagePackageDefParserRuleCall_0());
			}
			lv_package_0_0=rulePackageDef
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProgramRule());
				}
				set(
					$current,
					"package",
					lv_package_0_0,
					"mil.navy.nrl.ncarai.jasm.Program.PackageDef");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulePackageDef
entryRulePackageDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDefRule()); }
	iv_rulePackageDef=rulePackageDef
	{ $current=$iv_rulePackageDef.current; }
	EOF;

// Rule PackageDef
rulePackageDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='namespace'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDefAccess().getNamespaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDefAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDefRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='target'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDefAccess().getTargetKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDefAccess().getTargetQualifiedNameParserRuleCall_3_0());
				}
				lv_target_3_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDefRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getPackageDefAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getImportsImportParserRuleCall_5_0_0());
					}
					lv_imports_5_0=ruleImport
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"imports",
							lv_imports_5_0,
							"org.jactr.io2.jactr.ModelFragment.Import");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getIncludesIncludeParserRuleCall_5_1_0());
					}
					lv_includes_6_0=ruleInclude
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"includes",
							lv_includes_6_0,
							"mil.navy.nrl.ncarai.jasm.Program.Include");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDefAccess().getGeneratorGeneratorDefParserRuleCall_6_0());
				}
				lv_generator_7_0=ruleGeneratorDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDefRule());
					}
					set(
						$current,
						"generator",
						lv_generator_7_0,
						"mil.navy.nrl.ncarai.jasm.Program.GeneratorDef");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDefAccess().getBufferDefsBufferDefParserRuleCall_7_0());
				}
				lv_bufferDefs_8_0=ruleBufferDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDefRule());
					}
					add(
						$current,
						"bufferDefs",
						lv_bufferDefs_8_0,
						"mil.navy.nrl.ncarai.jasm.Program.BufferDef");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getChunkTypesChunkTypeParserRuleCall_8_0_0());
					}
					lv_chunkTypes_9_0=ruleChunkType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"chunkTypes",
							lv_chunkTypes_9_0,
							"org.jactr.io2.jactr.ModelFragment.ChunkType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getChunkDefsChunksParserRuleCall_8_1_0());
					}
					lv_chunkDefs_10_0=ruleChunks
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"chunkDefs",
							lv_chunkDefs_10_0,
							"org.jactr.io2.jactr.ModelFragment.Chunks");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getPatternsPatternParserRuleCall_8_2_0());
					}
					lv_patterns_11_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_11_0,
							"mil.navy.nrl.ncarai.jasm.Program.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDefAccess().getFunctionsFunctionParserRuleCall_8_3_0());
					}
					lv_functions_12_0=ruleFunction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDefRule());
						}
						add(
							$current,
							"functions",
							lv_functions_12_0,
							"mil.navy.nrl.ncarai.jasm.Program.Function");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getPackageDefAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current; }
	EOF;

// Rule Include
ruleInclude returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='include'
		{
			newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIncludeAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIncludeRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBufferDef
entryRuleBufferDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBufferDefRule()); }
	iv_ruleBufferDef=ruleBufferDef
	{ $current=$iv_ruleBufferDef.current; }
	EOF;

// Rule BufferDef
ruleBufferDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getBufferDefAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			(
				(
					lv_readable_1_0='readable'
					{
						newLeafNode(lv_readable_1_0, grammarAccess.getBufferDefAccess().getReadableReadableKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBufferDefRule());
						}
						setWithLastConsumed($current, "readable", true, "readable");
					}
				)
			)
			    |
			(
				(
					lv_writable_2_0='writable'
					{
						newLeafNode(lv_writable_2_0, grammarAccess.getBufferDefAccess().getWritableWritableKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBufferDefRule());
						}
						setWithLastConsumed($current, "writable", true, "writable");
					}
				)
			)
		)?
		(
			(
				lv_error_3_0='error'
				{
					newLeafNode(lv_error_3_0, grammarAccess.getBufferDefAccess().getErrorErrorKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferDefRule());
					}
					setWithLastConsumed($current, "error", true, "error");
				}
			)
		)?
		otherlv_4='requests'
		{
			newLeafNode(otherlv_4, grammarAccess.getBufferDefAccess().getRequestsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBufferDefAccess().getRequestsRequestDefParserRuleCall_4_0());
				}
				lv_requests_5_0=ruleRequestDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBufferDefRule());
					}
					add(
						$current,
						"requests",
						lv_requests_5_0,
						"mil.navy.nrl.ncarai.jasm.Program.RequestDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getBufferDefAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBufferDefAccess().getRequestsRequestDefParserRuleCall_5_1_0());
					}
					lv_requests_7_0=ruleRequestDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBufferDefRule());
						}
						add(
							$current,
							"requests",
							lv_requests_7_0,
							"mil.navy.nrl.ncarai.jasm.Program.RequestDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRequestDef
entryRuleRequestDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequestDefRule()); }
	iv_ruleRequestDef=ruleRequestDef
	{ $current=$iv_ruleRequestDef.current; }
	EOF;

// Rule RequestDef
ruleRequestDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_wildcardRequest_0_0='*'
					{
						newLeafNode(lv_wildcardRequest_0_0, grammarAccess.getRequestDefAccess().getWildcardRequestAsteriskKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequestDefRule());
						}
						setWithLastConsumed($current, "wildcardRequest", true, "*");
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequestDefRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getRequestDefAccess().getRequestTypeChunkTypeCrossReference_0_1_0());
					}
				)
			)
		)
		otherlv_2='->'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequestDefAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				(
					lv_wildcardResult_3_0='*'
					{
						newLeafNode(lv_wildcardResult_3_0, grammarAccess.getRequestDefAccess().getWildcardResultAsteriskKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequestDefRule());
						}
						setWithLastConsumed($current, "wildcardResult", true, "*");
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequestDefRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getRequestDefAccess().getResultTypeChunkTypeCrossReference_2_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleGeneratorDef
entryRuleGeneratorDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorDefRule()); }
	iv_ruleGeneratorDef=ruleGeneratorDef
	{ $current=$iv_ruleGeneratorDef.current; }
	EOF;

// Rule GeneratorDef
ruleGeneratorDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@generator'
		{
			newLeafNode(otherlv_0, grammarAccess.getGeneratorDefAccess().getGeneratorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneratorDefAccess().getParametersParametersBlockParserRuleCall_1_0());
				}
				lv_parameters_1_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneratorDefRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_1_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getEqualsSignKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='isa'
			{
				newLeafNode(otherlv_3, grammarAccess.getPatternAccess().getIsaKeyword_3_0());
			}
			(
				(
					lv_type_4_0=RULE_ID
					{
						newLeafNode(lv_type_4_0, grammarAccess.getPatternAccess().getTypeIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPatternRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_4_0,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getSlotsConditionalSlotParserRuleCall_4_0());
				}
				lv_slots_5_0=ruleConditionalSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					add(
						$current,
						"slots",
						lv_slots_5_0,
						"org.jactr.io2.jactr.ModelFragment.ConditionalSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		(
			(
				(
					lv_void_1_0='void'
					{
						newLeafNode(lv_void_1_0, grammarAccess.getFunctionAccess().getVoidVoidKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed($current, "void", true, "void");
					}
				)
			)
			    |
			(
				(
					lv_chunk_2_0='element'
					{
						newLeafNode(lv_chunk_2_0, grammarAccess.getFunctionAccess().getChunkElementKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctionRule());
						}
						setWithLastConsumed($current, "chunk", true, "element");
					}
				)
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getSlotsVariableStatementParserRuleCall_4_0_0());
					}
					lv_slots_5_0=ruleVariableStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"slots",
							lv_slots_5_0,
							"mil.navy.nrl.ncarai.jasm.Program.VariableStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getSlotsVariableStatementParserRuleCall_4_1_1_0());
						}
						lv_slots_7_0=ruleVariableStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"slots",
								lv_slots_7_0,
								"mil.navy.nrl.ncarai.jasm.Program.VariableStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getAssumedContentsWithAsStatementParserRuleCall_6_0());
				}
				lv_assumedContents_9_0=ruleWithAsStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"assumedContents",
						lv_assumedContents_9_0,
						"mil.navy.nrl.ncarai.jasm.Program.WithAsStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getRetainedContentsRetainAsStatementParserRuleCall_7_0());
				}
				lv_retainedContents_10_0=ruleRetainAsStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"retainedContents",
						lv_retainedContents_10_0,
						"mil.navy.nrl.ncarai.jasm.Program.RetainAsStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_11='{'
		{
			newLeafNode(otherlv_11, grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getVariablesVariableStatementParserRuleCall_9_0());
				}
				lv_variables_12_0=ruleVariableStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"variables",
						lv_variables_12_0,
						"mil.navy.nrl.ncarai.jasm.Program.VariableStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getInstructionsInstructionParserRuleCall_10_0());
				}
				lv_instructions_13_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_13_0,
						"mil.navy.nrl.ncarai.jasm.Program.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleWithAsStatement
entryRuleWithAsStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWithAsStatementRule()); }
	iv_ruleWithAsStatement=ruleWithAsStatement
	{ $current=$iv_ruleWithAsStatement.current; }
	EOF;

// Rule WithAsStatement
ruleWithAsStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getWithAsStatementAccess().getWithKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWithAsStatementAccess().getAssumedAsStatementParserRuleCall_1_0());
				}
				lv_assumed_1_0=ruleAsStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWithAsStatementRule());
					}
					add(
						$current,
						"assumed",
						lv_assumed_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.AsStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getWithAsStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWithAsStatementAccess().getAssumedAsStatementParserRuleCall_2_1_0());
					}
					lv_assumed_3_0=ruleAsStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWithAsStatementRule());
						}
						add(
							$current,
							"assumed",
							lv_assumed_3_0,
							"mil.navy.nrl.ncarai.jasm.Program.AsStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRetainAsStatement
entryRuleRetainAsStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetainAsStatementRule()); }
	iv_ruleRetainAsStatement=ruleRetainAsStatement
	{ $current=$iv_ruleRetainAsStatement.current; }
	EOF;

// Rule RetainAsStatement
ruleRetainAsStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='retain'
		{
			newLeafNode(otherlv_0, grammarAccess.getRetainAsStatementAccess().getRetainKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRetainAsStatementAccess().getRetainedAsStatementParserRuleCall_1_0());
				}
				lv_retained_1_0=ruleAsStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRetainAsStatementRule());
					}
					add(
						$current,
						"retained",
						lv_retained_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.AsStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRetainAsStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRetainAsStatementAccess().getRetainedAsStatementParserRuleCall_2_1_0());
					}
					lv_retained_3_0=ruleAsStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRetainAsStatementRule());
						}
						add(
							$current,
							"retained",
							lv_retained_3_0,
							"mil.navy.nrl.ncarai.jasm.Program.AsStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAsStatement
entryRuleAsStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAsStatementRule()); }
	iv_ruleAsStatement=ruleAsStatement
	{ $current=$iv_ruleAsStatement.current; }
	EOF;

// Rule AsStatement
ruleAsStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAsStatementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAsStatementAccess().getBufferBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getAsStatementAccess().getAsKeyword_1());
		}
		(
			(
				lv_type_2_0=RULE_ID
				{
					newLeafNode(lv_type_2_0, grammarAccess.getAsStatementAccess().getTypeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAsStatementRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableStatement
entryRuleVariableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableStatementRule()); }
	iv_ruleVariableStatement=ruleVariableStatement
	{ $current=$iv_ruleVariableStatement.current; }
	EOF;

// Rule VariableStatement
ruleVariableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='slot'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableStatementAccess().getSlotKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableStatementAccess().getAssignmentAssignmentStatementParserRuleCall_1_0());
				}
				lv_assignment_1_0=ruleAssignmentStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableStatementRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.AssignmentStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_2_0());
				}
				lv_instructions_2_0=ruleInstruction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					add(
						$current,
						"instructions",
						lv_instructions_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.Instruction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleInsertionStatement
entryRuleInsertionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertionStatementRule()); }
	iv_ruleInsertionStatement=ruleInsertionStatement
	{ $current=$iv_ruleInsertionStatement.current; }
	EOF;

// Rule InsertionStatement
ruleInsertionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<['
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertionStatementAccess().getLessThanSignLeftSquareBracketKeyword_0());
		}
		(
			(
				lv_entryState_1_0=RULE_ID
				{
					newLeafNode(lv_entryState_1_0, grammarAccess.getInsertionStatementAccess().getEntryStateIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertionStatementRule());
					}
					setWithLastConsumed(
						$current,
						"entryState",
						lv_entryState_1_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getInsertionStatementAccess().getCommaKeyword_2());
		}
		(
			(
				lv_exitState_3_0=RULE_ID
				{
					newLeafNode(lv_exitState_3_0, grammarAccess.getInsertionStatementAccess().getExitStateIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertionStatementRule());
					}
					setWithLastConsumed(
						$current,
						"exitState",
						lv_exitState_3_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getInsertionStatementAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_shouldGenerate_5_0='generate'
					{
						newLeafNode(lv_shouldGenerate_5_0, grammarAccess.getInsertionStatementAccess().getShouldGenerateGenerateKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInsertionStatementRule());
						}
						setWithLastConsumed($current, "shouldGenerate", true, "generate");
					}
				)
			)
		)?
		otherlv_6=']>'
		{
			newLeafNode(otherlv_6, grammarAccess.getInsertionStatementAccess().getRightSquareBracketGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getForLoopStatementParserRuleCall_0());
		}
		this_ForLoopStatement_0=ruleForLoopStatement
		{
			$current = $this_ForLoopStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getIfThenElseStatementParserRuleCall_1());
		}
		this_IfThenElseStatement_1=ruleIfThenElseStatement
		{
			$current = $this_IfThenElseStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRequestStatementParserRuleCall_2());
		}
		this_RequestStatement_2=ruleRequestStatement
		{
			$current = $this_RequestStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getFunctionCallStatementParserRuleCall_3());
		}
		this_FunctionCallStatement_3=ruleFunctionCallStatement
		{
			$current = $this_FunctionCallStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getReturnStatementParserRuleCall_4());
		}
		this_ReturnStatement_4=ruleReturnStatement
		{
			$current = $this_ReturnStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getMatchStatementParserRuleCall_5());
		}
		this_MatchStatement_5=ruleMatchStatement
		{
			$current = $this_MatchStatement_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getOutputStatementParserRuleCall_6());
		}
		this_OutputStatement_6=ruleOutputStatement
		{
			$current = $this_OutputStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getAssignmentStatementParserRuleCall_7());
		}
		this_AssignmentStatement_7=ruleAssignmentStatement
		{
			$current = $this_AssignmentStatement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRemoveStatementParserRuleCall_8());
		}
		this_RemoveStatement_8=ruleRemoveStatement
		{
			$current = $this_RemoveStatement_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getWhileDoStatementParserRuleCall_9());
		}
		this_WhileDoStatement_9=ruleWhileDoStatement
		{
			$current = $this_WhileDoStatement_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getDoWhileStatementParserRuleCall_10());
		}
		this_DoWhileStatement_10=ruleDoWhileStatement
		{
			$current = $this_DoWhileStatement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getInsertionStatementParserRuleCall_11());
		}
		this_InsertionStatement_11=ruleInsertionStatement
		{
			$current = $this_InsertionStatement_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRepeatUntilStatementParserRuleCall_12());
		}
		this_RepeatUntilStatement_12=ruleRepeatUntilStatement
		{
			$current = $this_RepeatUntilStatement_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getUntilRepeatStatementParserRuleCall_13());
		}
		this_UntilRepeatStatement_13=ruleUntilRepeatStatement
		{
			$current = $this_UntilRepeatStatement_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRewardStatementParserRuleCall_14());
		}
		this_RewardStatement_14=ruleRewardStatement
		{
			$current = $this_RewardStatement_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionCallStatement
entryRuleFunctionCallStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallStatementRule()); }
	iv_ruleFunctionCallStatement=ruleFunctionCallStatement
	{ $current=$iv_ruleFunctionCallStatement.current; }
	EOF;

// Rule FunctionCallStatement
ruleFunctionCallStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallStatementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallStatementAccess().getFunctionFunctionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallStatementAccess().getParametersAssignmentStatementParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleAssignmentStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallStatementRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"mil.navy.nrl.ncarai.jasm.Program.AssignmentStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallStatementAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallStatementAccess().getParametersAssignmentStatementParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleAssignmentStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallStatementRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"mil.navy.nrl.ncarai.jasm.Program.AssignmentStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallStatementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	iv_ruleAssignmentStatement=ruleAssignmentStatement
	{ $current=$iv_ruleAssignmentStatement.current; }
	EOF;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getReferenceVariableReferenceParserRuleCall_0_0());
				}
				lv_reference_0_0=ruleVariableReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"reference",
						lv_reference_0_0,
						"mil.navy.nrl.ncarai.jasm.Program.VariableReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getAssignmentVariableValueParserRuleCall_2_0());
				}
				lv_assignment_2_0=ruleVariableValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"assignment",
						lv_assignment_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.VariableValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	iv_ruleVariableReference=ruleVariableReference
	{ $current=$iv_ruleVariableReference.current; }
	EOF;

// Rule VariableReference
ruleVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableReferenceRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getBufferBufferCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableReferenceAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValueRule()); }
	iv_ruleVariableValue=ruleVariableValue
	{ $current=$iv_ruleVariableValue.current; }
	EOF;

// Rule VariableValue
ruleVariableValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableValueRule());
							}
						}
						otherlv_0=RULE_ID
						{
							newLeafNode(otherlv_0, grammarAccess.getVariableValueAccess().getBufferBufferCrossReference_0_0_0_0());
						}
					)
				)
				otherlv_1='.'
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableValueAccess().getFullStopKeyword_0_0_1());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableValueAccess().getValueValueParserRuleCall_0_1_0());
					}
					lv_value_2_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableValueRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.jactr.io2.jactr.ModelFragment.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableValueAccess().getFunctionCallFunctionCallStatementParserRuleCall_1_0());
				}
				lv_functionCall_3_0=ruleFunctionCallStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableValueRule());
					}
					set(
						$current,
						"functionCall",
						lv_functionCall_3_0,
						"mil.navy.nrl.ncarai.jasm.Program.FunctionCallStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReturnVariableReference
entryRuleReturnVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnVariableReferenceRule()); }
	iv_ruleReturnVariableReference=ruleReturnVariableReference
	{ $current=$iv_ruleReturnVariableReference.current; }
	EOF;

// Rule ReturnVariableReference
ruleReturnVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getReturnVariableReferenceRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getReturnVariableReferenceAccess().getBufferBufferCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getReturnVariableReferenceAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnVariableReferenceAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnVariableReferenceRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getReferenceReturnVariableReferenceParserRuleCall_2_0());
				}
				lv_reference_2_0=ruleReturnVariableReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"reference",
						lv_reference_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.ReturnVariableReference");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRemoveStatement
entryRuleRemoveStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveStatementRule()); }
	iv_ruleRemoveStatement=ruleRemoveStatement
	{ $current=$iv_ruleRemoveStatement.current; }
	EOF;

// Rule RemoveStatement
ruleRemoveStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='remove'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveStatementAccess().getRemoveKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRemoveStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getRemoveStatementAccess().getBuffersBufferCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getRemoveStatementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRemoveStatementRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getRemoveStatementAccess().getBuffersBufferCrossReference_2_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRequestStatement
entryRuleRequestStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequestStatementRule()); }
	iv_ruleRequestStatement=ruleRequestStatement
	{ $current=$iv_ruleRequestStatement.current; }
	EOF;

// Rule RequestStatement
ruleRequestStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_forced_0_0='force'
				{
					newLeafNode(lv_forced_0_0, grammarAccess.getRequestStatementAccess().getForcedForceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequestStatementRule());
					}
					setWithLastConsumed($current, "forced", true, "force");
				}
			)
		)?
		otherlv_1='request'
		{
			newLeafNode(otherlv_1, grammarAccess.getRequestStatementAccess().getRequestKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequestStatementRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getRequestStatementAccess().getBufferBufferCrossReference_2_0());
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getRequestStatementAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequestStatementAccess().getPatternReferenceVariableReferenceParserRuleCall_4_0());
				}
				lv_patternReference_4_0=ruleVariableReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequestStatementRule());
					}
					set(
						$current,
						"patternReference",
						lv_patternReference_4_0,
						"mil.navy.nrl.ncarai.jasm.Program.VariableReference");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRequestStatementAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getRequestStatementAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequestStatementAccess().getBindingsBindingsParserRuleCall_6_1_0());
					}
					lv_bindings_7_0=ruleBindings
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequestStatementRule());
						}
						set(
							$current,
							"bindings",
							lv_bindings_7_0,
							"mil.navy.nrl.ncarai.jasm.Program.Bindings");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='as'
			{
				newLeafNode(otherlv_8, grammarAccess.getRequestStatementAccess().getAsKeyword_7_0());
			}
			(
				(
					lv_cast_9_0=RULE_ID
					{
						newLeafNode(lv_cast_9_0, grammarAccess.getRequestStatementAccess().getCastIDTerminalRuleCall_7_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRequestStatementRule());
						}
						setWithLastConsumed(
							$current,
							"cast",
							lv_cast_9_0,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRequestStatementAccess().getMappingMappingParserRuleCall_8_0());
				}
				lv_mapping_10_0=ruleMapping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequestStatementRule());
					}
					set(
						$current,
						"mapping",
						lv_mapping_10_0,
						"mil.navy.nrl.ncarai.jasm.Program.Mapping");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRequestStatementAccess().getHandlerHandlerParserRuleCall_9_0());
				}
				lv_handler_11_0=ruleHandler
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequestStatementRule());
					}
					set(
						$current,
						"handler",
						lv_handler_11_0,
						"mil.navy.nrl.ncarai.jasm.Program.Handler");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRepeatUntilStatement
entryRuleRepeatUntilStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatUntilStatementRule()); }
	iv_ruleRepeatUntilStatement=ruleRepeatUntilStatement
	{ $current=$iv_ruleRepeatUntilStatement.current; }
	EOF;

// Rule RepeatUntilStatement
ruleRepeatUntilStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatUntilStatementAccess().getRepeatRepeatParserRuleCall_0_0());
				}
				lv_repeat_0_0=ruleRepeat
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatUntilStatementRule());
					}
					set(
						$current,
						"repeat",
						lv_repeat_0_0,
						"mil.navy.nrl.ncarai.jasm.Program.Repeat");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatUntilStatementAccess().getUntilUntilParserRuleCall_1_0());
				}
				lv_until_1_0=ruleUntil
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatUntilStatementRule());
					}
					set(
						$current,
						"until",
						lv_until_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Until");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUntilRepeatStatement
entryRuleUntilRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUntilRepeatStatementRule()); }
	iv_ruleUntilRepeatStatement=ruleUntilRepeatStatement
	{ $current=$iv_ruleUntilRepeatStatement.current; }
	EOF;

// Rule UntilRepeatStatement
ruleUntilRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUntilRepeatStatementAccess().getUntilUntilParserRuleCall_0_0());
				}
				lv_until_0_0=ruleUntil
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUntilRepeatStatementRule());
					}
					set(
						$current,
						"until",
						lv_until_0_0,
						"mil.navy.nrl.ncarai.jasm.Program.Until");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUntilRepeatStatementAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUntilRepeatStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhileDoStatement
entryRuleWhileDoStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileDoStatementRule()); }
	iv_ruleWhileDoStatement=ruleWhileDoStatement
	{ $current=$iv_ruleWhileDoStatement.current; }
	EOF;

// Rule WhileDoStatement
ruleWhileDoStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileDoStatementAccess().getWhileWhileParserRuleCall_0_0());
				}
				lv_while_0_0=ruleWhile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileDoStatementRule());
					}
					set(
						$current,
						"while",
						lv_while_0_0,
						"mil.navy.nrl.ncarai.jasm.Program.While");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileDoStatementAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileDoStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoWhileStatement
entryRuleDoWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoWhileStatementRule()); }
	iv_ruleDoWhileStatement=ruleDoWhileStatement
	{ $current=$iv_ruleDoWhileStatement.current; }
	EOF;

// Rule DoWhileStatement
ruleDoWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='do'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoWhileStatementAccess().getDoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileStatementAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDoWhileStatementAccess().getWhileWhileParserRuleCall_2_0());
				}
				lv_while_2_0=ruleWhile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoWhileStatementRule());
					}
					set(
						$current,
						"while",
						lv_while_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.While");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	iv_ruleRepeat=ruleRepeat
	{ $current=$iv_ruleRepeat.current; }
	EOF;

// Rule Repeat
ruleRepeat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRewardStatement
entryRuleRewardStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRewardStatementRule()); }
	iv_ruleRewardStatement=ruleRewardStatement
	{ $current=$iv_ruleRewardStatement.current; }
	EOF;

// Rule RewardStatement
ruleRewardStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='reward'
		{
			newLeafNode(otherlv_0, grammarAccess.getRewardStatementAccess().getRewardKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRewardStatementAccess().getRewardNUMERICParserRuleCall_1_0());
				}
				lv_reward_1_0=ruleNUMERIC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRewardStatementRule());
					}
					set(
						$current,
						"reward",
						lv_reward_1_0,
						"org.jactr.io2.jactr.ModelFragment.NUMERIC");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUntil
entryRuleUntil returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUntilRule()); }
	iv_ruleUntil=ruleUntil
	{ $current=$iv_ruleUntil.current; }
	EOF;

// Rule Until
ruleUntil returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='until'
		{
			newLeafNode(otherlv_0, grammarAccess.getUntilAccess().getUntilKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getUntilAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUntilAccess().getBindingsBindingsParserRuleCall_2_0());
				}
				lv_bindings_2_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUntilRule());
					}
					set(
						$current,
						"bindings",
						lv_bindings_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getUntilAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBindingsBindingsParserRuleCall_2_0());
				}
				lv_bindings_2_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"bindings",
						lv_bindings_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMatchStatement
entryRuleMatchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchStatementRule()); }
	iv_ruleMatchStatement=ruleMatchStatement
	{ $current=$iv_ruleMatchStatement.current; }
	EOF;

// Rule MatchStatement
ruleMatchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='match'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchStatementAccess().getMatchKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMatchStatementAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchStatementAccess().getCasesCaseStatementParserRuleCall_2_0());
				}
				lv_cases_2_0=ruleCaseStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.CaseStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchStatementAccess().getCasesCaseStatementParserRuleCall_3_0());
				}
				lv_cases_3_0=ruleCaseStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchStatementRule());
					}
					add(
						$current,
						"cases",
						lv_cases_3_0,
						"mil.navy.nrl.ncarai.jasm.Program.CaseStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='default'
		{
			newLeafNode(otherlv_4, grammarAccess.getMatchStatementAccess().getDefaultKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getMatchStatementAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchStatementAccess().getDefaultBlockBlockParserRuleCall_6_0());
				}
				lv_defaultBlock_6_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchStatementRule());
					}
					set(
						$current,
						"defaultBlock",
						lv_defaultBlock_6_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getMatchStatementAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	iv_ruleCaseStatement=ruleCaseStatement
	{ $current=$iv_ruleCaseStatement.current; }
	EOF;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getBindingsBindingsParserRuleCall_1_0());
				}
				lv_bindings_1_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"bindings",
						lv_bindings_1_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getPriorityNUMERICParserRuleCall_2_1_0());
					}
					lv_priority_3_0=ruleNUMERIC
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						set(
							$current,
							"priority",
							lv_priority_3_0,
							"org.jactr.io2.jactr.ModelFragment.NUMERIC");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getRightSquareBracketKeyword_2_2());
			}
		)?
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getCaseStatementAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_6_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_6_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOutputStatement
entryRuleOutputStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputStatementRule()); }
	iv_ruleOutputStatement=ruleOutputStatement
	{ $current=$iv_ruleOutputStatement.current; }
	EOF;

// Rule OutputStatement
ruleOutputStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputStatementAccess().getOutputKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getOutputStatementAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputStatementRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputStatementAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputStatementAccess().getBindingsBindingsParserRuleCall_3_1_0());
					}
					lv_bindings_4_0=ruleBindings
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputStatementRule());
						}
						set(
							$current,
							"bindings",
							lv_bindings_4_0,
							"mil.navy.nrl.ncarai.jasm.Program.Bindings");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getOutputStatementAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleForLoopStatement
entryRuleForLoopStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopStatementRule()); }
	iv_ruleForLoopStatement=ruleForLoopStatement
	{ $current=$iv_ruleForLoopStatement.current; }
	EOF;

// Rule ForLoopStatement
ruleForLoopStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_forced_0_0='force'
				{
					newLeafNode(lv_forced_0_0, grammarAccess.getForLoopStatementAccess().getForcedForceKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopStatementRule());
					}
					setWithLastConsumed($current, "forced", true, "force");
				}
			)
		)?
		otherlv_1='for'
		{
			newLeafNode(otherlv_1, grammarAccess.getForLoopStatementAccess().getForKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopStatementAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopStatementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getForLoopStatementAccess().getForBufferBufferCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getForLoopStatementAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopStatementRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getForLoopStatementAccess().getInitialPatternCrossReference_5_0());
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getForLoopStatementAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopStatementAccess().getInitialBindingsBindingsParserRuleCall_7_0());
				}
				lv_initialBindings_7_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopStatementRule());
					}
					set(
						$current,
						"initialBindings",
						lv_initialBindings_7_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getForLoopStatementAccess().getCommaKeyword_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopStatementRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getForLoopStatementAccess().getSubsequentPatternCrossReference_9_0());
				}
			)
		)
		otherlv_10=','
		{
			newLeafNode(otherlv_10, grammarAccess.getForLoopStatementAccess().getCommaKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopStatementAccess().getSubsequentBindingsBindingsParserRuleCall_11_0());
				}
				lv_subsequentBindings_11_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopStatementRule());
					}
					set(
						$current,
						"subsequentBindings",
						lv_subsequentBindings_11_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12=')'
		{
			newLeafNode(otherlv_12, grammarAccess.getForLoopStatementAccess().getRightParenthesisKeyword_12());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopStatementAccess().getBlockBlockParserRuleCall_13_0());
				}
				lv_block_13_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopStatementRule());
					}
					set(
						$current,
						"block",
						lv_block_13_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfThenElseStatement
entryRuleIfThenElseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfThenElseStatementRule()); }
	iv_ruleIfThenElseStatement=ruleIfThenElseStatement
	{ $current=$iv_ruleIfThenElseStatement.current; }
	EOF;

// Rule IfThenElseStatement
ruleIfThenElseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfThenElseStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfThenElseStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getBindingsBindingsParserRuleCall_2_0());
				}
				lv_bindings_2_0=ruleBindings
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
					}
					set(
						$current,
						"bindings",
						lv_bindings_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.Bindings");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfThenElseStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getThenBlockBlockParserRuleCall_4_0());
				}
				lv_thenBlock_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
					}
					set(
						$current,
						"thenBlock",
						lv_thenBlock_4_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfThenElseStatementAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfThenElseStatementAccess().getElseBlockBlockParserRuleCall_5_1_0());
					}
					lv_elseBlock_6_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfThenElseStatementRule());
						}
						set(
							$current,
							"elseBlock",
							lv_elseBlock_6_0,
							"mil.navy.nrl.ncarai.jasm.Program.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBindings
entryRuleBindings returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingsRule()); }
	iv_ruleBindings=ruleBindings
	{ $current=$iv_ruleBindings.current; }
	EOF;

// Rule Bindings
ruleBindings returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingsAccess().getBindingsBufferPatternParserRuleCall_0_0());
				}
				lv_bindings_0_0=ruleBufferPattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingsRule());
					}
					add(
						$current,
						"bindings",
						lv_bindings_0_0,
						"mil.navy.nrl.ncarai.jasm.Program.BufferPattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='&&'
			{
				newLeafNode(otherlv_1, grammarAccess.getBindingsAccess().getAmpersandAmpersandKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBindingsAccess().getBindingsBufferPatternParserRuleCall_1_1_0());
					}
					lv_bindings_2_0=ruleBufferPattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBindingsRule());
						}
						add(
							$current,
							"bindings",
							lv_bindings_2_0,
							"mil.navy.nrl.ncarai.jasm.Program.BufferPattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBufferPattern
entryRuleBufferPattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBufferPatternRule()); }
	iv_ruleBufferPattern=ruleBufferPattern
	{ $current=$iv_ruleBufferPattern.current; }
	EOF;

// Rule BufferPattern
ruleBufferPattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferPatternRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBufferPatternAccess().getBufferBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getBufferPatternAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferPatternRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getBufferPatternAccess().getPatternPatternCrossReference_2_0());
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getBufferPatternAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMappingAccess().getMappingAction_0(),
					$current);
			}
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getAssignmentsAssignmentStatementParserRuleCall_2_0());
				}
				lv_assignments_2_0=ruleAssignmentStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.AssignmentStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleHandler
entryRuleHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHandlerRule()); }
	iv_ruleHandler=ruleHandler
	{ $current=$iv_ruleHandler.current; }
	EOF;

// Rule Handler
ruleHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHandlerAccess().getHandlerAction_0(),
					$current);
			}
		)
		otherlv_1='=>'
		{
			newLeafNode(otherlv_1, grammarAccess.getHandlerAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHandlerAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_block_2_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHandlerRule());
					}
					set(
						$current,
						"block",
						lv_block_2_0,
						"mil.navy.nrl.ncarai.jasm.Program.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='namespace'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getNamespaceKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"org.jactr.io2.jactr.ModelFragment.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getModulesModelModuleParserRuleCall_4_0());
				}
				lv_modules_4_0=ruleModelModule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"modules",
						lv_modules_4_0,
						"org.jactr.io2.jactr.ModelFragment.ModelModule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getExtensionsModelExtensionParserRuleCall_5_0());
				}
				lv_extensions_5_0=ruleModelExtension
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"extensions",
						lv_extensions_5_0,
						"org.jactr.io2.jactr.ModelFragment.ModelExtension");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getBuffersBuffersParserRuleCall_6_0());
				}
				lv_buffers_6_0=ruleBuffers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"buffers",
						lv_buffers_6_0,
						"org.jactr.io2.jactr.ModelFragment.Buffers");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsElementParserRuleCall_7_0());
				}
				lv_elements_7_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_7_0,
						"org.jactr.io2.jactr.ModelFragment.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getParametersParametersBlockParserRuleCall_9_0());
				}
				lv_parameters_9_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_9_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"org.jactr.io2.jactr.ModelFragment.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleModelModule
entryRuleModelModule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelModuleRule()); }
	iv_ruleModelModule=ruleModelModule
	{ $current=$iv_ruleModelModule.current; }
	EOF;

// Rule ModelModule
ruleModelModule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='module'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelModuleAccess().getModuleKeyword_0());
		}
		(
			(
				lv_moduleClass_1_0=RULE_STRING
				{
					newLeafNode(lv_moduleClass_1_0, grammarAccess.getModelModuleAccess().getModuleClassSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelModuleRule());
					}
					setWithLastConsumed(
						$current,
						"moduleClass",
						lv_moduleClass_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelModuleAccess().getParametersParametersBlockParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelModuleRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleModelExtension
entryRuleModelExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelExtensionRule()); }
	iv_ruleModelExtension=ruleModelExtension
	{ $current=$iv_ruleModelExtension.current; }
	EOF;

// Rule ModelExtension
ruleModelExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extension'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelExtensionAccess().getExtensionKeyword_0());
		}
		(
			(
				lv_extensionClass_1_0=RULE_STRING
				{
					newLeafNode(lv_extensionClass_1_0, grammarAccess.getModelExtensionAccess().getExtensionClassSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelExtensionRule());
					}
					setWithLastConsumed(
						$current,
						"extensionClass",
						lv_extensionClass_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelExtensionAccess().getParametersParametersBlockParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelExtensionRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getChunkTypeParserRuleCall_0());
		}
		this_ChunkType_0=ruleChunkType
		{
			$current = $this_ChunkType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getChunksParserRuleCall_1());
		}
		this_Chunks_1=ruleChunks
		{
			$current = $this_Chunks_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getProductionParserRuleCall_2());
		}
		this_Production_2=ruleProduction
		{
			$current = $this_Production_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getParametersParserRuleCall_3());
		}
		this_Parameters_3=ruleParameters
		{
			$current = $this_Parameters_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='parameters'
		{
			newLeafNode(otherlv_0, grammarAccess.getParametersAccess().getParametersKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_elements_2_0=RULE_ID
				{
					newLeafNode(lv_elements_2_0, grammarAccess.getParametersAccess().getElementsIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParametersRule());
					}
					addWithLastConsumed(
						$current,
						"elements",
						lv_elements_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getParametersAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_elements_4_0=RULE_ID
					{
						newLeafNode(lv_elements_4_0, grammarAccess.getParametersAccess().getElementsIDTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParametersRule());
						}
						addWithLastConsumed(
							$current,
							"elements",
							lv_elements_4_0,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParametersAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersAccess().getParametersParametersBlockParserRuleCall_5_0());
				}
				lv_parameters_6_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_6_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChunks
entryRuleChunks returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunksRule()); }
	iv_ruleChunks=ruleChunks
	{ $current=$iv_ruleChunks.current; }
	EOF;

// Rule Chunks
ruleChunks returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunksRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getChunksAccess().getTypeChunkTypeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChunksAccess().getChunksChunkDefParserRuleCall_1_0());
				}
				lv_chunks_1_0=ruleChunkDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunksRule());
					}
					add(
						$current,
						"chunks",
						lv_chunks_1_0,
						"org.jactr.io2.jactr.ModelFragment.ChunkDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getChunksAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChunksAccess().getChunksChunkDefParserRuleCall_2_1_0());
					}
					lv_chunks_3_0=ruleChunkDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChunksRule());
						}
						add(
							$current,
							"chunks",
							lv_chunks_3_0,
							"org.jactr.io2.jactr.ModelFragment.ChunkDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleChunkDef
entryRuleChunkDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunkDefRule()); }
	iv_ruleChunkDef=ruleChunkDef
	{ $current=$iv_ruleChunkDef.current; }
	EOF;

// Rule ChunkDef
ruleChunkDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getChunkDefRule());
			}
			newCompositeNode(grammarAccess.getChunkDefAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getChunkDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunkDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getChunkDefAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChunkDefAccess().getSlotsSimpleSlotParserRuleCall_2_1_0());
					}
					lv_slots_3_0=ruleSimpleSlot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChunkDefRule());
						}
						add(
							$current,
							"slots",
							lv_slots_3_0,
							"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getChunkDefAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getChunkDefAccess().getSlotsSimpleSlotParserRuleCall_2_2_1_0());
						}
						lv_slots_5_0=ruleSimpleSlot
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChunkDefRule());
							}
							add(
								$current,
								"slots",
								lv_slots_5_0,
								"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getChunkDefAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkDefAccess().getParametersParametersBlockParserRuleCall_3_0());
				}
				lv_parameters_7_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkDefRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_7_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleChunkType
entryRuleChunkType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChunkTypeRule()); }
	iv_ruleChunkType=ruleChunkType
	{ $current=$iv_ruleChunkType.current; }
	EOF;

// Rule ChunkType
ruleChunkType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getChunkTypeRule());
			}
			newCompositeNode(grammarAccess.getChunkTypeAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='chunktype'
		{
			newLeafNode(otherlv_1, grammarAccess.getChunkTypeAccess().getChunktypeKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getChunkTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChunkTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getChunkTypeAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChunkTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getChunkTypeAccess().getSuperTypeChunkTypeCrossReference_3_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getChunkTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkTypeAccess().getSlotsSimpleSlotParserRuleCall_5_0());
				}
				lv_slots_6_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkTypeRule());
					}
					add(
						$current,
						"slots",
						lv_slots_6_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getChunkTypeAccess().getRightCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChunkTypeAccess().getParametersParametersBlockParserRuleCall_7_0());
				}
				lv_parameters_8_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChunkTypeRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_8_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
		}
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;


// Rule Overridable
ruleOverridable[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOverridableAccess().getOverrideOVERRIDEParserRuleCall_0());
			}
			lv_override_0_0=ruleOVERRIDE
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOverridableRule());
				}
				set(
					$current,
					"override",
					true,
					"org.jactr.io2.jactr.ModelFragment.OVERRIDE");
				afterParserOrEnumRuleCall();
			}
		)
	)?
;

// Entry rule entryRuleBuffers
entryRuleBuffers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuffersRule()); }
	iv_ruleBuffers=ruleBuffers
	{ $current=$iv_ruleBuffers.current; }
	EOF;

// Rule Buffers
ruleBuffers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBuffersAccess().getBuffersAction_0(),
					$current);
			}
		)
		otherlv_1='buffers'
		{
			newLeafNode(otherlv_1, grammarAccess.getBuffersAccess().getBuffersKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBuffersAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBuffersAccess().getBuffersBufferParserRuleCall_3_0());
				}
				lv_buffers_3_0=ruleBuffer
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBuffersRule());
					}
					add(
						$current,
						"buffers",
						lv_buffers_3_0,
						"org.jactr.io2.jactr.ModelFragment.Buffer");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBuffersAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleBuffer
entryRuleBuffer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBufferRule()); }
	iv_ruleBuffer=ruleBuffer
	{ $current=$iv_ruleBuffer.current; }
	EOF;

// Rule Buffer
ruleBuffer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getBufferRule());
			}
			newCompositeNode(grammarAccess.getBufferAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBufferAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBufferAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBufferRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getBufferAccess().getSourceChunkDefCrossReference_3_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBufferAccess().getRightCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBufferAccess().getParametersParametersBlockParserRuleCall_5_0());
				}
				lv_parameters_5_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBufferRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_5_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleProduction
entryRuleProduction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionRule()); }
	iv_ruleProduction=ruleProduction
	{ $current=$iv_ruleProduction.current; }
	EOF;

// Rule Production
ruleProduction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getProductionRule());
			}
			newCompositeNode(grammarAccess.getProductionAccess().getOverridableParserRuleCall_0());
		}
		this_Overridable_0=ruleOverridable[$current]
		{
			$current = $this_Overridable_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1='production'
		{
			newLeafNode(otherlv_1, grammarAccess.getProductionAccess().getProductionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProductionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProductionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getProductionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getConditionsProductionConditionParserRuleCall_4_0());
				}
				lv_conditions_4_0=ruleProductionCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"org.jactr.io2.jactr.ModelFragment.ProductionCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProductionAccess().getRightCurlyBracketKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getProductionAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getActionsProductionActionParserRuleCall_7_0());
				}
				lv_actions_7_0=ruleProductionAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					add(
						$current,
						"actions",
						lv_actions_7_0,
						"org.jactr.io2.jactr.ModelFragment.ProductionAction");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProductionAccess().getRightCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getParametersParametersBlockParserRuleCall_9_0());
				}
				lv_parameters_9_0=ruleParametersBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_9_0,
						"org.jactr.io2.jactr.ModelFragment.ParametersBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleProductionCondition
entryRuleProductionCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionConditionRule()); }
	iv_ruleProductionCondition=ruleProductionCondition
	{ $current=$iv_ruleProductionCondition.current; }
	EOF;

// Rule ProductionCondition
ruleProductionCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getMatchParserRuleCall_0());
		}
		this_Match_0=ruleMatch
		{
			$current = $this_Match_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getQueryParserRuleCall_1());
		}
		this_Query_1=ruleQuery
		{
			$current = $this_Query_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getScriptParserRuleCall_2());
		}
		this_Script_2=ruleScript
		{
			$current = $this_Script_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionConditionAccess().getProxyParserRuleCall_3());
		}
		this_Proxy_3=ruleProxy
		{
			$current = $this_Proxy_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMatch
entryRuleMatch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchRule()); }
	iv_ruleMatch=ruleMatch
	{ $current=$iv_ruleMatch.current; }
	EOF;

// Rule Match
ruleMatch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMatchRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getMatchAccess().getNameBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMatchAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getIsaIsaBlockParserRuleCall_2_0());
				}
				lv_isa_2_0=ruleIsaBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					set(
						$current,
						"isa",
						lv_isa_2_0,
						"org.jactr.io2.jactr.ModelFragment.IsaBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getMatchAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleQuery
entryRuleQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQueryRule()); }
	iv_ruleQuery=ruleQuery
	{ $current=$iv_ruleQuery.current; }
	EOF;

// Rule Query
ruleQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?'
		{
			newLeafNode(otherlv_0, grammarAccess.getQueryAccess().getQuestionMarkKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQueryRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getQueryAccess().getNameBufferCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQueryAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQueryRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleProxy
entryRuleProxy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProxyRule()); }
	iv_ruleProxy=ruleProxy
	{ $current=$iv_ruleProxy.current; }
	EOF;

// Rule Proxy
ruleProxy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='proxy'
		{
			newLeafNode(otherlv_0, grammarAccess.getProxyAccess().getProxyKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProxyAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProxyAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProxyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getProxyAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getProxyAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProxyAccess().getSlotsSimpleSlotParserRuleCall_5_0());
				}
				lv_slots_5_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProxyRule());
					}
					add(
						$current,
						"slots",
						lv_slots_5_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getProxyAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='script'
		{
			newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getScriptAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_language_2_0=RULE_STRING
				{
					newLeafNode(lv_language_2_0, grammarAccess.getScriptAccess().getLanguageSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"language",
						lv_language_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				lv_script_4_0=RULE_CODE
				{
					newLeafNode(lv_script_4_0, grammarAccess.getScriptAccess().getScriptCODETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"script",
						lv_script_4_0,
						"org.jactr.io2.jactr.ModelFragment.CODE");
				}
			)
		)
	)
;

// Entry rule entryRuleProductionAction
entryRuleProductionAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionActionRule()); }
	iv_ruleProductionAction=ruleProductionAction
	{ $current=$iv_ruleProductionAction.current; }
	EOF;

// Rule ProductionAction
ruleProductionAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getAddParserRuleCall_0());
		}
		this_Add_0=ruleAdd
		{
			$current = $this_Add_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getRemoveParserRuleCall_1());
		}
		this_Remove_1=ruleRemove
		{
			$current = $this_Remove_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getModifyParserRuleCall_2());
		}
		this_Modify_2=ruleModify
		{
			$current = $this_Modify_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getScriptParserRuleCall_3());
		}
		this_Script_3=ruleScript
		{
			$current = $this_Script_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getProxyParserRuleCall_4());
		}
		this_Proxy_4=ruleProxy
		{
			$current = $this_Proxy_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProductionActionAccess().getOutputParserRuleCall_5());
		}
		this_Output_5=ruleOutput
		{
			$current = $this_Output_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='+'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddAccess().getPlusSignKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getAddAccess().getNameBufferCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getIsaIsaBlockParserRuleCall_3_0());
				}
				lv_isa_3_0=ruleIsaBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					set(
						$current,
						"isa",
						lv_isa_3_0,
						"org.jactr.io2.jactr.ModelFragment.IsaBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAddAccess().getSlotsConditionalSlotParserRuleCall_4_0());
				}
				lv_slots_4_0=ruleConditionalSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddRule());
					}
					add(
						$current,
						"slots",
						lv_slots_4_0,
						"org.jactr.io2.jactr.ModelFragment.ConditionalSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAddAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleRemove
entryRuleRemove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRemoveRule()); }
	iv_ruleRemove=ruleRemove
	{ $current=$iv_ruleRemove.current; }
	EOF;

// Rule Remove
ruleRemove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='-'
		{
			newLeafNode(otherlv_0, grammarAccess.getRemoveAccess().getHyphenMinusKeyword_0());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRemoveRule());
			}
			newCompositeNode(grammarAccess.getRemoveAccess().getSimpleSlotBlockParserRuleCall_1());
		}
		this_SimpleSlotBlock_1=ruleSimpleSlotBlock[$current]
		{
			$current = $this_SimpleSlotBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleModify
entryRuleModify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifyRule()); }
	iv_ruleModify=ruleModify
	{ $current=$iv_ruleModify.current; }
	EOF;

// Rule Modify
ruleModify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		if ($current==null) {
			$current = createModelElement(grammarAccess.getModifyRule());
		}
		newCompositeNode(grammarAccess.getModifyAccess().getSimpleSlotBlockParserRuleCall());
	}
	this_SimpleSlotBlock_0=ruleSimpleSlotBlock[$current]
	{
		$current = $this_SimpleSlotBlock_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getOutputAccess().getStringSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getRightParenthesisKeyword_3());
		}
	)
;


// Rule SimpleSlotBlock
ruleSimpleSlotBlock[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSlotBlockRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSimpleSlotBlockAccess().getNameBufferCrossReference_0_0());
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleSlotBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSlotBlockAccess().getSlotsSimpleSlotParserRuleCall_2_0());
				}
				lv_slots_2_0=ruleSimpleSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSlotBlockRule());
					}
					add(
						$current,
						"slots",
						lv_slots_2_0,
						"org.jactr.io2.jactr.ModelFragment.SimpleSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleSlotBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIsaBlock
entryRuleIsaBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsaBlockRule()); }
	iv_ruleIsaBlock=ruleIsaBlock
	{ $current=$iv_ruleIsaBlock.current; }
	EOF;

// Rule IsaBlock
ruleIsaBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='isa'
			{
				newLeafNode(otherlv_0, grammarAccess.getIsaBlockAccess().getIsaKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIsaBlockRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getIsaBlockAccess().getTypeChunkTypeCrossReference_0_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIsaBlockRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIsaBlockAccess().getChunkChunkDefCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIsaBlockAccess().getNameVARIABLEParserRuleCall_2_0());
				}
				lv_name_3_0=ruleVARIABLE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsaBlockRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"org.jactr.io2.jactr.ModelFragment.VARIABLE");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleSlot
entryRuleSimpleSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSlotRule()); }
	iv_ruleSimpleSlot=ruleSimpleSlot
	{ $current=$iv_ruleSimpleSlot.current; }
	EOF;

// Rule SimpleSlot
ruleSimpleSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSimpleSlotAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleSlotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.jactr.io2.jactr.ModelFragment.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleSlotAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSlotAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSlotRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComplexSlot
entryRuleComplexSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexSlotRule()); }
	iv_ruleComplexSlot=ruleComplexSlot
	{ $current=$iv_ruleComplexSlot.current; }
	EOF;

// Rule ComplexSlot
ruleComplexSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComplexSlotAccess().getBooleanOperationParserRuleCall_0());
		}
		this_BooleanOperation_0=ruleBooleanOperation
		{
			$current = $this_BooleanOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComplexSlotAccess().getConditionalSlotParserRuleCall_1());
		}
		this_ConditionalSlot_1=ruleConditionalSlot
		{
			$current = $this_ConditionalSlot_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanOperation
entryRuleBooleanOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanOperationRule()); }
	iv_ruleBooleanOperation=ruleBooleanOperation
	{ $current=$iv_ruleBooleanOperation.current; }
	EOF;

// Rule BooleanOperation
ruleBooleanOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getOrSlotParserRuleCall_0());
		}
		this_OrSlot_0=ruleOrSlot
		{
			$current = $this_OrSlot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getNotSlotParserRuleCall_1());
		}
		this_NotSlot_1=ruleNotSlot
		{
			$current = $this_NotSlot_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanOperationAccess().getAndSlotParserRuleCall_2());
		}
		this_AndSlot_2=ruleAndSlot
		{
			$current = $this_AndSlot_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConditionalSlot
entryRuleConditionalSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalSlotRule()); }
	iv_ruleConditionalSlot=ruleConditionalSlot
	{ $current=$iv_ruleConditionalSlot.current; }
	EOF;

// Rule ConditionalSlot
ruleConditionalSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_1=RULE_ID
					{
						newLeafNode(lv_name_0_1, grammarAccess.getConditionalSlotAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionalSlotRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_1,
							"org.jactr.io2.jactr.ModelFragment.ID");
					}
					    |
					{
						newCompositeNode(grammarAccess.getConditionalSlotAccess().getNameVARIABLEParserRuleCall_0_0_1());
					}
					lv_name_0_2=ruleVARIABLE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
						}
						set(
							$current,
							"name",
							lv_name_0_2,
							"org.jactr.io2.jactr.ModelFragment.VARIABLE");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalSlotAccess().getConditionConditionEnumRuleCall_1_0());
				}
				lv_condition_1_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.jactr.io2.jactr.ModelFragment.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalSlotAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalSlotRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOrSlot
entryRuleOrSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrSlotRule()); }
	iv_ruleOrSlot=ruleOrSlot
	{ $current=$iv_ruleOrSlot.current; }
	EOF;

// Rule OrSlot
ruleOrSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOrSlotAccess().getOrSlotAction_0(),
					$current);
			}
		)
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getOrSlotAccess().getOrKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getOrSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getOrSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAndSlot
entryRuleAndSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndSlotRule()); }
	iv_ruleAndSlot=ruleAndSlot
	{ $current=$iv_ruleAndSlot.current; }
	EOF;

// Rule AndSlot
ruleAndSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAndSlotAccess().getAndSlotAction_0(),
					$current);
			}
		)
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getAndSlotAccess().getAndKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAndSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAndSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNotSlot
entryRuleNotSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotSlotRule()); }
	iv_ruleNotSlot=ruleNotSlot
	{ $current=$iv_ruleNotSlot.current; }
	EOF;

// Rule NotSlot
ruleNotSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNotSlotAccess().getNotSlotAction_0(),
					$current);
			}
		)
		otherlv_1='not'
		{
			newLeafNode(otherlv_1, grammarAccess.getNotSlotAccess().getNotKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getNotSlotAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotSlotAccess().getSlotsComplexSlotParserRuleCall_3_0());
				}
				lv_slots_3_0=ruleComplexSlot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotSlotRule());
					}
					add(
						$current,
						"slots",
						lv_slots_3_0,
						"org.jactr.io2.jactr.ModelFragment.ComplexSlot");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getNotSlotAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_STRING
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.jactr.io2.jactr.ModelFragment.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParametersBlock
entryRuleParametersBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersBlockRule()); }
	iv_ruleParametersBlock=ruleParametersBlock
	{ $current=$iv_ruleParametersBlock.current; }
	EOF;

// Rule ParametersBlock
ruleParametersBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametersBlockAccess().getParametersBlockAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getParametersBlockAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersBlockAccess().getParameterParameterParserRuleCall_2_0());
				}
				lv_parameter_2_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersBlockRule());
					}
					add(
						$current,
						"parameter",
						lv_parameter_2_0,
						"org.jactr.io2.jactr.ModelFragment.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getParametersBlockAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getValueAccess().getValueAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValueAccess().getNameVARIABLEParserRuleCall_0_1_0_0());
						}
						lv_name_1_1=ruleVARIABLE
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							set(
								$current,
								"name",
								lv_name_1_1,
								"org.jactr.io2.jactr.ModelFragment.VARIABLE");
							afterParserOrEnumRuleCall();
						}
						    |
						lv_name_1_2=RULE_ID
						{
							newLeafNode(lv_name_1_2, grammarAccess.getValueAccess().getNameIDTerminalRuleCall_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getValueRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_1_2,
								"org.jactr.io2.jactr.ModelFragment.ID");
						}
						    |
						{
							newCompositeNode(grammarAccess.getValueAccess().getNameNULLParserRuleCall_0_1_0_2());
						}
						lv_name_1_3=ruleNULL
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							set(
								$current,
								"name",
								lv_name_1_3,
								"org.jactr.io2.jactr.ModelFragment.NULL");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				lv_string_2_0=RULE_STRING
				{
					newLeafNode(lv_string_2_0, grammarAccess.getValueAccess().getStringSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNumberNUMERICParserRuleCall_2_0());
				}
				lv_number_3_0=ruleNUMERIC
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"number",
						lv_number_3_0,
						"org.jactr.io2.jactr.ModelFragment.NUMERIC");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getBooleanBOOLEANParserRuleCall_3_0());
				}
				lv_boolean_4_0=ruleBOOLEAN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"boolean",
						lv_boolean_4_0,
						"org.jactr.io2.jactr.ModelFragment.BOOLEAN");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVARIABLE
entryRuleVARIABLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVARIABLERule()); }
	iv_ruleVARIABLE=ruleVARIABLE
	{ $current=$iv_ruleVARIABLE.current.getText(); }
	EOF;

// Rule VARIABLE
ruleVARIABLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVARIABLEAccess().getEqualsSignKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getVARIABLEAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleNULL
entryRuleNULL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNULLRule()); }
	iv_ruleNULL=ruleNULL
	{ $current=$iv_ruleNULL.current.getText(); }
	EOF;

// Rule NULL
ruleNULL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='null'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNULLAccess().getNullKeyword());
	}
;

// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); }
	iv_ruleBOOLEAN=ruleBOOLEAN
	{ $current=$iv_ruleBOOLEAN.current.getText(); }
	EOF;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleNUMERIC
entryRuleNUMERIC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNUMERICRule()); }
	iv_ruleNUMERIC=ruleNUMERIC
	{ $current=$iv_ruleNUMERIC.current.getText(); }
	EOF;

// Rule NUMERIC
ruleNUMERIC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMERICAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_DIGITS_1=RULE_DIGITS
		{
			$current.merge(this_DIGITS_1);
		}
		{
			newLeafNode(this_DIGITS_1, grammarAccess.getNUMERICAccess().getDIGITSTerminalRuleCall_1());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNUMERICAccess().getFullStopKeyword_2_0());
			}
			this_DIGITS_3=RULE_DIGITS
			{
				$current.merge(this_DIGITS_3);
			}
			{
				newLeafNode(this_DIGITS_3, grammarAccess.getNUMERICAccess().getDIGITSTerminalRuleCall_2_1());
			}
		)?
	)
;

// Entry rule entryRuleOVERRIDE
entryRuleOVERRIDE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOVERRIDERule()); }
	iv_ruleOVERRIDE=ruleOVERRIDE
	{ $current=$iv_ruleOVERRIDE.current.getText(); }
	EOF;

// Rule OVERRIDE
ruleOVERRIDE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='@Override'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getOVERRIDEAccess().getOverrideKeyword());
	}
;

// Rule Condition
ruleCondition returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConditionAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getConditionAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConditionAccess().getLTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getConditionAccess().getLTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getConditionAccess().getLTEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>'
			{
				$current = grammarAccess.getConditionAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getConditionAccess().getGTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getConditionAccess().getGTEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getConditionAccess().getGTEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='!='
			{
				$current = grammarAccess.getConditionAccess().getNOTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getConditionAccess().getNOTEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|':') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|'_')* ('a'..'z'|'A'..'Z'|'0'..'9');

RULE_DIGITS : ('0'..'9')+;

RULE_CODE : '<[[' ( options {greedy=false;} : . )*']]>';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
