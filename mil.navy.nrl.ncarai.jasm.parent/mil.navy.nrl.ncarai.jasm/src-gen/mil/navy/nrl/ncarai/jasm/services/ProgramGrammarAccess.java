/*
 * generated by Xtext 2.20.0
 */
package mil.navy.nrl.ncarai.jasm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.jactr.io2.jactr.services.ModelFragmentGrammarAccess;

@Singleton
public class ProgramGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Program");
		private final Assignment cPackageAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagePackageDefParserRuleCall_0 = (RuleCall)cPackageAssignment.eContents().get(0);
		
		//Program:
		//	package=PackageDef;
		@Override public ParserRule getRule() { return rule; }
		
		//package=PackageDef
		public Assignment getPackageAssignment() { return cPackageAssignment; }
		
		//PackageDef
		public RuleCall getPackagePackageDefParserRuleCall_0() { return cPackagePackageDefParserRuleCall_0; }
	}
	public class PackageDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.PackageDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTargetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetQualifiedNameParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cImportsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_5_0_0 = (RuleCall)cImportsAssignment_5_0.eContents().get(0);
		private final Assignment cIncludesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cIncludesIncludeParserRuleCall_5_1_0 = (RuleCall)cIncludesAssignment_5_1.eContents().get(0);
		private final Assignment cGeneratorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGeneratorGeneratorDefParserRuleCall_6_0 = (RuleCall)cGeneratorAssignment_6.eContents().get(0);
		private final Assignment cBufferDefsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBufferDefsBufferDefParserRuleCall_7_0 = (RuleCall)cBufferDefsAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cChunkTypesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cChunkTypesChunkTypeParserRuleCall_8_0_0 = (RuleCall)cChunkTypesAssignment_8_0.eContents().get(0);
		private final Assignment cChunkDefsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cChunkDefsChunksParserRuleCall_8_1_0 = (RuleCall)cChunkDefsAssignment_8_1.eContents().get(0);
		private final Assignment cPatternsAssignment_8_2 = (Assignment)cAlternatives_8.eContents().get(2);
		private final RuleCall cPatternsPatternParserRuleCall_8_2_0 = (RuleCall)cPatternsAssignment_8_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_8_3 = (Assignment)cAlternatives_8.eContents().get(3);
		private final RuleCall cFunctionsFunctionParserRuleCall_8_3_0 = (RuleCall)cFunctionsAssignment_8_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PackageDef:
		//	'namespace' name=QualifiedName 'target' target=QualifiedName '{' (imports+=Import | includes+=Include)* //used for jasm
		//	generator=GeneratorDef?
		//	bufferDefs+=BufferDef* (chunkTypes+=ChunkType | chunkDefs+=Chunks | patterns+=Pattern | functions+=Function)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'namespace' name=QualifiedName 'target' target=QualifiedName '{' (imports+=Import | includes+=Include)* //used for jasm
		//generator=GeneratorDef? bufferDefs+=BufferDef* (chunkTypes+=ChunkType | chunkDefs+=Chunks | patterns+=Pattern |
		//functions+=Function)* '}'
		public Group getGroup() { return cGroup; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'target'
		public Keyword getTargetKeyword_2() { return cTargetKeyword_2; }
		
		//target=QualifiedName
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//QualifiedName
		public RuleCall getTargetQualifiedNameParserRuleCall_3_0() { return cTargetQualifiedNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(imports+=Import | includes+=Include)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//imports+=Import
		public Assignment getImportsAssignment_5_0() { return cImportsAssignment_5_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_5_0_0() { return cImportsImportParserRuleCall_5_0_0; }
		
		////used for jactr
		//includes+=Include
		public Assignment getIncludesAssignment_5_1() { return cIncludesAssignment_5_1; }
		
		//Include
		public RuleCall getIncludesIncludeParserRuleCall_5_1_0() { return cIncludesIncludeParserRuleCall_5_1_0; }
		
		////used for jasm
		//generator=GeneratorDef?
		public Assignment getGeneratorAssignment_6() { return cGeneratorAssignment_6; }
		
		//GeneratorDef
		public RuleCall getGeneratorGeneratorDefParserRuleCall_6_0() { return cGeneratorGeneratorDefParserRuleCall_6_0; }
		
		//bufferDefs+=BufferDef*
		public Assignment getBufferDefsAssignment_7() { return cBufferDefsAssignment_7; }
		
		//BufferDef
		public RuleCall getBufferDefsBufferDefParserRuleCall_7_0() { return cBufferDefsBufferDefParserRuleCall_7_0; }
		
		//(chunkTypes+=ChunkType | chunkDefs+=Chunks | patterns+=Pattern | functions+=Function)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//chunkTypes+=ChunkType
		public Assignment getChunkTypesAssignment_8_0() { return cChunkTypesAssignment_8_0; }
		
		//ChunkType
		public RuleCall getChunkTypesChunkTypeParserRuleCall_8_0_0() { return cChunkTypesChunkTypeParserRuleCall_8_0_0; }
		
		//chunkDefs+=Chunks
		public Assignment getChunkDefsAssignment_8_1() { return cChunkDefsAssignment_8_1; }
		
		//Chunks
		public RuleCall getChunkDefsChunksParserRuleCall_8_1_0() { return cChunkDefsChunksParserRuleCall_8_1_0; }
		
		//patterns+=Pattern
		public Assignment getPatternsAssignment_8_2() { return cPatternsAssignment_8_2; }
		
		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_8_2_0() { return cPatternsPatternParserRuleCall_8_2_0; }
		
		//functions+=Function
		public Assignment getFunctionsAssignment_8_3() { return cFunctionsAssignment_8_3; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_8_3_0() { return cFunctionsFunctionParserRuleCall_8_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Include:
		//	'include' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'include' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'include'
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class BufferDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.BufferDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cReadableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cReadableReadableKeyword_1_0_0 = (Keyword)cReadableAssignment_1_0.eContents().get(0);
		private final Assignment cWritableAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cWritableWritableKeyword_1_1_0 = (Keyword)cWritableAssignment_1_1.eContents().get(0);
		private final Assignment cErrorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cErrorErrorKeyword_2_0 = (Keyword)cErrorAssignment_2.eContents().get(0);
		private final Keyword cRequestsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequestsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequestsRequestDefParserRuleCall_4_0 = (RuleCall)cRequestsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRequestsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRequestsRequestDefParserRuleCall_5_1_0 = (RuleCall)cRequestsAssignment_5_1.eContents().get(0);
		
		//BufferDef:
		//	name=ID (readable?='readable' | writable?='writable')? error?='error'? 'requests' requests+=RequestDef (','
		//	requests+=RequestDef)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (readable?='readable' | writable?='writable')? error?='error'? 'requests' requests+=RequestDef (','
		//requests+=RequestDef)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(readable?='readable' | writable?='writable')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//readable?='readable'
		public Assignment getReadableAssignment_1_0() { return cReadableAssignment_1_0; }
		
		//'readable'
		public Keyword getReadableReadableKeyword_1_0_0() { return cReadableReadableKeyword_1_0_0; }
		
		//writable?='writable'
		public Assignment getWritableAssignment_1_1() { return cWritableAssignment_1_1; }
		
		//'writable'
		public Keyword getWritableWritableKeyword_1_1_0() { return cWritableWritableKeyword_1_1_0; }
		
		//error?='error'?
		public Assignment getErrorAssignment_2() { return cErrorAssignment_2; }
		
		//'error'
		public Keyword getErrorErrorKeyword_2_0() { return cErrorErrorKeyword_2_0; }
		
		//'requests'
		public Keyword getRequestsKeyword_3() { return cRequestsKeyword_3; }
		
		//requests+=RequestDef
		public Assignment getRequestsAssignment_4() { return cRequestsAssignment_4; }
		
		//RequestDef
		public RuleCall getRequestsRequestDefParserRuleCall_4_0() { return cRequestsRequestDefParserRuleCall_4_0; }
		
		//(',' requests+=RequestDef)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//requests+=RequestDef
		public Assignment getRequestsAssignment_5_1() { return cRequestsAssignment_5_1; }
		
		//RequestDef
		public RuleCall getRequestsRequestDefParserRuleCall_5_1_0() { return cRequestsRequestDefParserRuleCall_5_1_0; }
	}
	public class RequestDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RequestDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cWildcardRequestAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cWildcardRequestAsteriskKeyword_0_0_0 = (Keyword)cWildcardRequestAssignment_0_0.eContents().get(0);
		private final Assignment cRequestTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRequestTypeChunkTypeCrossReference_0_1_0 = (CrossReference)cRequestTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cRequestTypeChunkTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRequestTypeChunkTypeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cWildcardResultAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cWildcardResultAsteriskKeyword_2_0_0 = (Keyword)cWildcardResultAssignment_2_0.eContents().get(0);
		private final Assignment cResultTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cResultTypeChunkTypeCrossReference_2_1_0 = (CrossReference)cResultTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cResultTypeChunkTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cResultTypeChunkTypeCrossReference_2_1_0.eContents().get(1);
		
		//RequestDef:
		//	(wildcardRequest?='*' | requestType=[ChunkType]) '->' (wildcardResult?='*' | resultType=[ChunkType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//(wildcardRequest?='*' | requestType=[ChunkType]) '->' (wildcardResult?='*' | resultType=[ChunkType])?
		public Group getGroup() { return cGroup; }
		
		//(wildcardRequest?='*' | requestType=[ChunkType])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//wildcardRequest?='*'
		public Assignment getWildcardRequestAssignment_0_0() { return cWildcardRequestAssignment_0_0; }
		
		//'*'
		public Keyword getWildcardRequestAsteriskKeyword_0_0_0() { return cWildcardRequestAsteriskKeyword_0_0_0; }
		
		//requestType=[ChunkType]
		public Assignment getRequestTypeAssignment_0_1() { return cRequestTypeAssignment_0_1; }
		
		//[ChunkType]
		public CrossReference getRequestTypeChunkTypeCrossReference_0_1_0() { return cRequestTypeChunkTypeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getRequestTypeChunkTypeIDTerminalRuleCall_0_1_0_1() { return cRequestTypeChunkTypeIDTerminalRuleCall_0_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//(wildcardResult?='*' | resultType=[ChunkType])?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//wildcardResult?='*'
		public Assignment getWildcardResultAssignment_2_0() { return cWildcardResultAssignment_2_0; }
		
		//'*'
		public Keyword getWildcardResultAsteriskKeyword_2_0_0() { return cWildcardResultAsteriskKeyword_2_0_0; }
		
		//resultType=[ChunkType]
		public Assignment getResultTypeAssignment_2_1() { return cResultTypeAssignment_2_1; }
		
		//[ChunkType]
		public CrossReference getResultTypeChunkTypeCrossReference_2_1_0() { return cResultTypeChunkTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getResultTypeChunkTypeIDTerminalRuleCall_2_1_0_1() { return cResultTypeChunkTypeIDTerminalRuleCall_2_1_0_1; }
	}
	public class GeneratorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.GeneratorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGeneratorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersParametersBlockParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		
		//GeneratorDef:
		//	'@generator' parameters=ParametersBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'@generator' parameters=ParametersBlock
		public Group getGroup() { return cGroup; }
		
		//'@generator'
		public Keyword getGeneratorKeyword_0() { return cGeneratorKeyword_0; }
		
		//parameters=ParametersBlock
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//ParametersBlock
		public RuleCall getParametersParametersBlockParserRuleCall_1_0() { return cParametersParametersBlockParserRuleCall_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIsaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Assignment cSlotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSlotsConditionalSlotParserRuleCall_4_0 = (RuleCall)cSlotsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Pattern:
		//	name=ID '=' '{' ('isa' type=ID)? //why not [ChunkType] because we need to match to functions too, 
		//	slots+=ConditionalSlot* //and trying to do both will screw the parser
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' '{' ('isa' type=ID)? //why not [ChunkType] because we need to match to functions too, 
		//slots+=ConditionalSlot* //and trying to do both will screw the parser
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('isa' type=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'isa'
		public Keyword getIsaKeyword_3_0() { return cIsaKeyword_3_0; }
		
		//type=ID
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_1_0() { return cTypeIDTerminalRuleCall_3_1_0; }
		
		////why not [ChunkType] because we need to match to functions too, 
		//slots+=ConditionalSlot*
		public Assignment getSlotsAssignment_4() { return cSlotsAssignment_4; }
		
		//ConditionalSlot
		public RuleCall getSlotsConditionalSlotParserRuleCall_4_0() { return cSlotsConditionalSlotParserRuleCall_4_0; }
		
		////and trying to do both will screw the parser
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVoidAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cVoidVoidKeyword_1_0_0 = (Keyword)cVoidAssignment_1_0.eContents().get(0);
		private final Assignment cChunkAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cChunkElementKeyword_1_1_0 = (Keyword)cChunkAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSlotsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSlotsVariableStatementParserRuleCall_4_0_0 = (RuleCall)cSlotsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSlotsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSlotsVariableStatementParserRuleCall_4_1_1_0 = (RuleCall)cSlotsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssumedContentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssumedContentsWithAsStatementParserRuleCall_6_0 = (RuleCall)cAssumedContentsAssignment_6.eContents().get(0);
		private final Assignment cRetainedContentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRetainedContentsRetainAsStatementParserRuleCall_7_0 = (RuleCall)cRetainedContentsAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cVariablesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cVariablesVariableStatementParserRuleCall_9_0 = (RuleCall)cVariablesAssignment_9.eContents().get(0);
		private final Assignment cInstructionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cInstructionsInstructionParserRuleCall_10_0 = (RuleCall)cInstructionsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Function:
		//	'function' (void?='void' | chunk?='element') name=ID '(' (slots+=VariableStatement (','
		//	slots+=VariableStatement)*)?
		//	')' assumedContents=WithAsStatement? retainedContents=RetainAsStatement? '{'
		//	variables+=VariableStatement*
		//	instructions+=Instruction+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' (void?='void' | chunk?='element') name=ID '(' (slots+=VariableStatement (',' slots+=VariableStatement)*)? ')'
		//assumedContents=WithAsStatement? retainedContents=RetainAsStatement? '{' variables+=VariableStatement*
		//instructions+=Instruction+ '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//(void?='void' | chunk?='element')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//void?='void'
		public Assignment getVoidAssignment_1_0() { return cVoidAssignment_1_0; }
		
		//'void'
		public Keyword getVoidVoidKeyword_1_0_0() { return cVoidVoidKeyword_1_0_0; }
		
		//chunk?='element'
		public Assignment getChunkAssignment_1_1() { return cChunkAssignment_1_1; }
		
		//'element'
		public Keyword getChunkElementKeyword_1_1_0() { return cChunkElementKeyword_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(slots+=VariableStatement (',' slots+=VariableStatement)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//slots+=VariableStatement
		public Assignment getSlotsAssignment_4_0() { return cSlotsAssignment_4_0; }
		
		//VariableStatement
		public RuleCall getSlotsVariableStatementParserRuleCall_4_0_0() { return cSlotsVariableStatementParserRuleCall_4_0_0; }
		
		//(',' slots+=VariableStatement)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//slots+=VariableStatement
		public Assignment getSlotsAssignment_4_1_1() { return cSlotsAssignment_4_1_1; }
		
		//VariableStatement
		public RuleCall getSlotsVariableStatementParserRuleCall_4_1_1_0() { return cSlotsVariableStatementParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//assumedContents=WithAsStatement?
		public Assignment getAssumedContentsAssignment_6() { return cAssumedContentsAssignment_6; }
		
		//WithAsStatement
		public RuleCall getAssumedContentsWithAsStatementParserRuleCall_6_0() { return cAssumedContentsWithAsStatementParserRuleCall_6_0; }
		
		//retainedContents=RetainAsStatement?
		public Assignment getRetainedContentsAssignment_7() { return cRetainedContentsAssignment_7; }
		
		//RetainAsStatement
		public RuleCall getRetainedContentsRetainAsStatementParserRuleCall_7_0() { return cRetainedContentsRetainAsStatementParserRuleCall_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//variables+=VariableStatement*
		public Assignment getVariablesAssignment_9() { return cVariablesAssignment_9; }
		
		//VariableStatement
		public RuleCall getVariablesVariableStatementParserRuleCall_9_0() { return cVariablesVariableStatementParserRuleCall_9_0; }
		
		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_10() { return cInstructionsAssignment_10; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_10_0() { return cInstructionsInstructionParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class WithAsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.WithAsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssumedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssumedAsStatementParserRuleCall_1_0 = (RuleCall)cAssumedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAssumedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssumedAsStatementParserRuleCall_2_1_0 = (RuleCall)cAssumedAssignment_2_1.eContents().get(0);
		
		//WithAsStatement:
		//	'with' assumed+=AsStatement (',' assumed+=AsStatement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' assumed+=AsStatement (',' assumed+=AsStatement)*
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//assumed+=AsStatement
		public Assignment getAssumedAssignment_1() { return cAssumedAssignment_1; }
		
		//AsStatement
		public RuleCall getAssumedAsStatementParserRuleCall_1_0() { return cAssumedAsStatementParserRuleCall_1_0; }
		
		//(',' assumed+=AsStatement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//assumed+=AsStatement
		public Assignment getAssumedAssignment_2_1() { return cAssumedAssignment_2_1; }
		
		//AsStatement
		public RuleCall getAssumedAsStatementParserRuleCall_2_1_0() { return cAssumedAsStatementParserRuleCall_2_1_0; }
	}
	public class RetainAsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RetainAsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRetainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRetainedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRetainedAsStatementParserRuleCall_1_0 = (RuleCall)cRetainedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRetainedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRetainedAsStatementParserRuleCall_2_1_0 = (RuleCall)cRetainedAssignment_2_1.eContents().get(0);
		
		//RetainAsStatement:
		//	'retain' retained+=AsStatement (',' retained+=AsStatement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'retain' retained+=AsStatement (',' retained+=AsStatement)*
		public Group getGroup() { return cGroup; }
		
		//'retain'
		public Keyword getRetainKeyword_0() { return cRetainKeyword_0; }
		
		//retained+=AsStatement
		public Assignment getRetainedAssignment_1() { return cRetainedAssignment_1; }
		
		//AsStatement
		public RuleCall getRetainedAsStatementParserRuleCall_1_0() { return cRetainedAsStatementParserRuleCall_1_0; }
		
		//(',' retained+=AsStatement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//retained+=AsStatement
		public Assignment getRetainedAssignment_2_1() { return cRetainedAssignment_2_1; }
		
		//AsStatement
		public RuleCall getRetainedAsStatementParserRuleCall_2_1_0() { return cRetainedAsStatementParserRuleCall_2_1_0; }
	}
	public class AsStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.AsStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBufferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBufferBufferCrossReference_0_0 = (CrossReference)cBufferAssignment_0.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_0_0_1 = (RuleCall)cBufferBufferCrossReference_0_0.eContents().get(1);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//AsStatement:
		//	buffer=[Buffer] 'as' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//buffer=[Buffer] 'as' type=ID
		public Group getGroup() { return cGroup; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_0() { return cBufferAssignment_0; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_0_0() { return cBufferBufferCrossReference_0_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_0_0_1() { return cBufferBufferIDTerminalRuleCall_0_0_1; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}
	public class VariableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.VariableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssignmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignmentAssignmentStatementParserRuleCall_1_0 = (RuleCall)cAssignmentAssignment_1.eContents().get(0);
		
		//VariableStatement:
		//	'slot' assignment=AssignmentStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//'slot' assignment=AssignmentStatement
		public Group getGroup() { return cGroup; }
		
		//'slot'
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }
		
		//assignment=AssignmentStatement
		public Assignment getAssignmentAssignment_1() { return cAssignmentAssignment_1; }
		
		//AssignmentStatement
		public RuleCall getAssignmentAssignmentStatementParserRuleCall_1_0() { return cAssignmentAssignmentStatementParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{'
		//	instructions+=Instruction+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} '{' instructions+=Instruction+ '}'
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_0() { return cInstructionsInstructionParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InsertionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.InsertionStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEntryStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEntryStateIDTerminalRuleCall_1_0 = (RuleCall)cEntryStateAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExitStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExitStateIDTerminalRuleCall_3_0 = (RuleCall)cExitStateAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cShouldGenerateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cShouldGenerateGenerateKeyword_4_1_0 = (Keyword)cShouldGenerateAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InsertionStatement:
		//	'<[' entryState=ID ',' exitState=ID (',' shouldGenerate?='generate')? ']>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<[' entryState=ID ',' exitState=ID (',' shouldGenerate?='generate')? ']>'
		public Group getGroup() { return cGroup; }
		
		//'<['
		public Keyword getLessThanSignLeftSquareBracketKeyword_0() { return cLessThanSignLeftSquareBracketKeyword_0; }
		
		//entryState=ID
		public Assignment getEntryStateAssignment_1() { return cEntryStateAssignment_1; }
		
		//ID
		public RuleCall getEntryStateIDTerminalRuleCall_1_0() { return cEntryStateIDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//exitState=ID
		public Assignment getExitStateAssignment_3() { return cExitStateAssignment_3; }
		
		//ID
		public RuleCall getExitStateIDTerminalRuleCall_3_0() { return cExitStateIDTerminalRuleCall_3_0; }
		
		//(',' shouldGenerate?='generate')?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//shouldGenerate?='generate'
		public Assignment getShouldGenerateAssignment_4_1() { return cShouldGenerateAssignment_4_1; }
		
		//'generate'
		public Keyword getShouldGenerateGenerateKeyword_4_1_0() { return cShouldGenerateGenerateKeyword_4_1_0; }
		
		//']>'
		public Keyword getRightSquareBracketGreaterThanSignKeyword_5() { return cRightSquareBracketGreaterThanSignKeyword_5; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForLoopStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfThenElseStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequestStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionCallStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReturnStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMatchStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOutputStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAssignmentStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRemoveStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cWhileDoStatementParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDoWhileStatementParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cInsertionStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRepeatUntilStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUntilRepeatStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cRewardStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Instruction:
		//	ForLoopStatement | IfThenElseStatement | RequestStatement | FunctionCallStatement | ReturnStatement | MatchStatement |
		//	OutputStatement | AssignmentStatement | RemoveStatement | WhileDoStatement | DoWhileStatement | InsertionStatement |
		//	RepeatUntilStatement | UntilRepeatStatement | RewardStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//ForLoopStatement | IfThenElseStatement | RequestStatement | FunctionCallStatement | ReturnStatement | MatchStatement |
		//OutputStatement | AssignmentStatement | RemoveStatement | WhileDoStatement | DoWhileStatement | InsertionStatement |
		//RepeatUntilStatement | UntilRepeatStatement | RewardStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForLoopStatement
		public RuleCall getForLoopStatementParserRuleCall_0() { return cForLoopStatementParserRuleCall_0; }
		
		//IfThenElseStatement
		public RuleCall getIfThenElseStatementParserRuleCall_1() { return cIfThenElseStatementParserRuleCall_1; }
		
		//RequestStatement
		public RuleCall getRequestStatementParserRuleCall_2() { return cRequestStatementParserRuleCall_2; }
		
		//FunctionCallStatement
		public RuleCall getFunctionCallStatementParserRuleCall_3() { return cFunctionCallStatementParserRuleCall_3; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_4() { return cReturnStatementParserRuleCall_4; }
		
		//MatchStatement
		public RuleCall getMatchStatementParserRuleCall_5() { return cMatchStatementParserRuleCall_5; }
		
		//OutputStatement
		public RuleCall getOutputStatementParserRuleCall_6() { return cOutputStatementParserRuleCall_6; }
		
		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_7() { return cAssignmentStatementParserRuleCall_7; }
		
		//RemoveStatement
		public RuleCall getRemoveStatementParserRuleCall_8() { return cRemoveStatementParserRuleCall_8; }
		
		//WhileDoStatement
		public RuleCall getWhileDoStatementParserRuleCall_9() { return cWhileDoStatementParserRuleCall_9; }
		
		//DoWhileStatement
		public RuleCall getDoWhileStatementParserRuleCall_10() { return cDoWhileStatementParserRuleCall_10; }
		
		//InsertionStatement
		public RuleCall getInsertionStatementParserRuleCall_11() { return cInsertionStatementParserRuleCall_11; }
		
		//RepeatUntilStatement
		public RuleCall getRepeatUntilStatementParserRuleCall_12() { return cRepeatUntilStatementParserRuleCall_12; }
		
		//UntilRepeatStatement
		public RuleCall getUntilRepeatStatementParserRuleCall_13() { return cUntilRepeatStatementParserRuleCall_13; }
		
		//RewardStatement
		public RuleCall getRewardStatementParserRuleCall_14() { return cRewardStatementParserRuleCall_14; }
	}
	public class FunctionCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.FunctionCallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersAssignmentStatementParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersAssignmentStatementParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallStatement:
		//	function=[Function] '(' (parameters+=AssignmentStatement (',' parameters+=AssignmentStatement)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=[Function] '(' (parameters+=AssignmentStatement (',' parameters+=AssignmentStatement)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=AssignmentStatement (',' parameters+=AssignmentStatement)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=AssignmentStatement
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//AssignmentStatement
		public RuleCall getParametersAssignmentStatementParserRuleCall_2_0_0() { return cParametersAssignmentStatementParserRuleCall_2_0_0; }
		
		//(',' parameters+=AssignmentStatement)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=AssignmentStatement
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//AssignmentStatement
		public RuleCall getParametersAssignmentStatementParserRuleCall_2_1_1_0() { return cParametersAssignmentStatementParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceVariableReferenceParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentVariableValueParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		
		//AssignmentStatement:
		//	reference=VariableReference
		//	'='
		//	assignment=VariableValue;
		@Override public ParserRule getRule() { return rule; }
		
		//reference=VariableReference '=' assignment=VariableValue
		public Group getGroup() { return cGroup; }
		
		//reference=VariableReference
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }
		
		//VariableReference
		public RuleCall getReferenceVariableReferenceParserRuleCall_0_0() { return cReferenceVariableReferenceParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//assignment=VariableValue
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }
		
		//VariableValue
		public RuleCall getAssignmentVariableValueParserRuleCall_2_0() { return cAssignmentVariableValueParserRuleCall_2_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cBufferAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cBufferBufferCrossReference_0_0_0 = (CrossReference)cBufferAssignment_0_0.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_0_0_0_1 = (RuleCall)cBufferBufferCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableReference:
		//	(buffer=[Buffer] '.')? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(buffer=[Buffer] '.')? name=ID
		public Group getGroup() { return cGroup; }
		
		//(buffer=[Buffer] '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_0_0() { return cBufferAssignment_0_0; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_0_0_0() { return cBufferBufferCrossReference_0_0_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_0_0_0_1() { return cBufferBufferIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.VariableValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cBufferAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cBufferBufferCrossReference_0_0_0_0 = (CrossReference)cBufferAssignment_0_0_0.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_0_0_0_0_1 = (RuleCall)cBufferBufferCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cFunctionCallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallFunctionCallStatementParserRuleCall_1_0 = (RuleCall)cFunctionCallAssignment_1.eContents().get(0);
		
		//VariableValue:
		//	(buffer=[Buffer] '.')? value=Value | functionCall=FunctionCallStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//(buffer=[Buffer] '.')? value=Value | functionCall=FunctionCallStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(buffer=[Buffer] '.')? value=Value
		public Group getGroup_0() { return cGroup_0; }
		
		//(buffer=[Buffer] '.')?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_0_0_0() { return cBufferAssignment_0_0_0; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_0_0_0_0() { return cBufferBufferCrossReference_0_0_0_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_0_0_0_0_1() { return cBufferBufferIDTerminalRuleCall_0_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0_1() { return cFullStopKeyword_0_0_1; }
		
		//value=Value
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_0_1_0() { return cValueValueParserRuleCall_0_1_0; }
		
		//functionCall=FunctionCallStatement
		public Assignment getFunctionCallAssignment_1() { return cFunctionCallAssignment_1; }
		
		//FunctionCallStatement
		public RuleCall getFunctionCallFunctionCallStatementParserRuleCall_1_0() { return cFunctionCallFunctionCallStatementParserRuleCall_1_0; }
	}
	public class ReturnVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.ReturnVariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cBufferAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cBufferBufferCrossReference_0_0_0 = (CrossReference)cBufferAssignment_0_0.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_0_0_0_1 = (RuleCall)cBufferBufferCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ReturnVariableReference:
		//	(buffer=[Buffer] '.')? value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//(buffer=[Buffer] '.')? value=Value
		public Group getGroup() { return cGroup; }
		
		//(buffer=[Buffer] '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_0_0() { return cBufferAssignment_0_0; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_0_0_0() { return cBufferBufferCrossReference_0_0_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_0_0_0_1() { return cBufferBufferIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReferenceReturnVariableReferenceParserRuleCall_2_0 = (RuleCall)cReferenceAssignment_2.eContents().get(0);
		
		//ReturnStatement:
		//	{ReturnStatement} 'return' reference=ReturnVariableReference?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStatement} 'return' reference=ReturnVariableReference?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//reference=ReturnVariableReference?
		public Assignment getReferenceAssignment_2() { return cReferenceAssignment_2; }
		
		//ReturnVariableReference
		public RuleCall getReferenceReturnVariableReferenceParserRuleCall_2_0() { return cReferenceReturnVariableReferenceParserRuleCall_2_0; }
	}
	public class RemoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RemoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBuffersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cBuffersBufferCrossReference_1_0 = (CrossReference)cBuffersAssignment_1.eContents().get(0);
		private final RuleCall cBuffersBufferIDTerminalRuleCall_1_0_1 = (RuleCall)cBuffersBufferCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBuffersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cBuffersBufferCrossReference_2_1_0 = (CrossReference)cBuffersAssignment_2_1.eContents().get(0);
		private final RuleCall cBuffersBufferIDTerminalRuleCall_2_1_0_1 = (RuleCall)cBuffersBufferCrossReference_2_1_0.eContents().get(1);
		
		//RemoveStatement:
		//	'remove' buffers+=[Buffer] (',' buffers+=[Buffer])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' buffers+=[Buffer] (',' buffers+=[Buffer])*
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//buffers+=[Buffer]
		public Assignment getBuffersAssignment_1() { return cBuffersAssignment_1; }
		
		//[Buffer]
		public CrossReference getBuffersBufferCrossReference_1_0() { return cBuffersBufferCrossReference_1_0; }
		
		//ID
		public RuleCall getBuffersBufferIDTerminalRuleCall_1_0_1() { return cBuffersBufferIDTerminalRuleCall_1_0_1; }
		
		//(',' buffers+=[Buffer])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//buffers+=[Buffer]
		public Assignment getBuffersAssignment_2_1() { return cBuffersAssignment_2_1; }
		
		//[Buffer]
		public CrossReference getBuffersBufferCrossReference_2_1_0() { return cBuffersBufferCrossReference_2_1_0; }
		
		//ID
		public RuleCall getBuffersBufferIDTerminalRuleCall_2_1_0_1() { return cBuffersBufferIDTerminalRuleCall_2_1_0_1; }
	}
	public class RequestStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RequestStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForcedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cForcedForceKeyword_0_0 = (Keyword)cForcedAssignment_0.eContents().get(0);
		private final Keyword cRequestKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBufferAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBufferBufferCrossReference_2_0 = (CrossReference)cBufferAssignment_2.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_2_0_1 = (RuleCall)cBufferBufferCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPatternReferenceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPatternReferenceVariableReferenceParserRuleCall_4_0 = (RuleCall)cPatternReferenceAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBindingsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBindingsBindingsParserRuleCall_6_1_0 = (RuleCall)cBindingsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCastAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCastIDTerminalRuleCall_7_1_0 = (RuleCall)cCastAssignment_7_1.eContents().get(0);
		private final Assignment cMappingAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMappingMappingParserRuleCall_8_0 = (RuleCall)cMappingAssignment_8.eContents().get(0);
		private final Assignment cHandlerAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHandlerHandlerParserRuleCall_9_0 = (RuleCall)cHandlerAssignment_9.eContents().get(0);
		
		//RequestStatement:
		//	forced?='force'? 'request' buffer=[Buffer] '('
		//	patternReference=VariableReference? ')' (',' bindings=Bindings)? ('as'
		//	cast=ID)? mapping=Mapping? handler=Handler?;
		@Override public ParserRule getRule() { return rule; }
		
		//forced?='force'? 'request' buffer=[Buffer] '(' patternReference=VariableReference? ')' (',' bindings=Bindings)? ('as'
		//cast=ID)? mapping=Mapping? handler=Handler?
		public Group getGroup() { return cGroup; }
		
		//forced?='force'?
		public Assignment getForcedAssignment_0() { return cForcedAssignment_0; }
		
		//'force'
		public Keyword getForcedForceKeyword_0_0() { return cForcedForceKeyword_0_0; }
		
		//'request'
		public Keyword getRequestKeyword_1() { return cRequestKeyword_1; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_2() { return cBufferAssignment_2; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_2_0() { return cBufferBufferCrossReference_2_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_2_0_1() { return cBufferBufferIDTerminalRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//patternReference=VariableReference?
		public Assignment getPatternReferenceAssignment_4() { return cPatternReferenceAssignment_4; }
		
		//VariableReference
		public RuleCall getPatternReferenceVariableReferenceParserRuleCall_4_0() { return cPatternReferenceVariableReferenceParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(',' bindings=Bindings)?
		public Group getGroup_6() { return cGroup_6; }
		
		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_6_1() { return cBindingsAssignment_6_1; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_6_1_0() { return cBindingsBindingsParserRuleCall_6_1_0; }
		
		//('as' cast=ID)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'as'
		public Keyword getAsKeyword_7_0() { return cAsKeyword_7_0; }
		
		//cast=ID
		public Assignment getCastAssignment_7_1() { return cCastAssignment_7_1; }
		
		//ID
		public RuleCall getCastIDTerminalRuleCall_7_1_0() { return cCastIDTerminalRuleCall_7_1_0; }
		
		//mapping=Mapping?
		public Assignment getMappingAssignment_8() { return cMappingAssignment_8; }
		
		//Mapping
		public RuleCall getMappingMappingParserRuleCall_8_0() { return cMappingMappingParserRuleCall_8_0; }
		
		//handler=Handler?
		public Assignment getHandlerAssignment_9() { return cHandlerAssignment_9; }
		
		//Handler
		public RuleCall getHandlerHandlerParserRuleCall_9_0() { return cHandlerHandlerParserRuleCall_9_0; }
	}
	public class RepeatUntilStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RepeatUntilStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRepeatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRepeatRepeatParserRuleCall_0_0 = (RuleCall)cRepeatAssignment_0.eContents().get(0);
		private final Assignment cUntilAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUntilUntilParserRuleCall_1_0 = (RuleCall)cUntilAssignment_1.eContents().get(0);
		
		//RepeatUntilStatement:
		//	repeat=Repeat until=Until;
		@Override public ParserRule getRule() { return rule; }
		
		//repeat=Repeat until=Until
		public Group getGroup() { return cGroup; }
		
		//repeat=Repeat
		public Assignment getRepeatAssignment_0() { return cRepeatAssignment_0; }
		
		//Repeat
		public RuleCall getRepeatRepeatParserRuleCall_0_0() { return cRepeatRepeatParserRuleCall_0_0; }
		
		//until=Until
		public Assignment getUntilAssignment_1() { return cUntilAssignment_1; }
		
		//Until
		public RuleCall getUntilUntilParserRuleCall_1_0() { return cUntilUntilParserRuleCall_1_0; }
	}
	public class UntilRepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.UntilRepeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUntilAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUntilUntilParserRuleCall_0_0 = (RuleCall)cUntilAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//UntilRepeatStatement:
		//	until=Until block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//until=Until block=Block
		public Group getGroup() { return cGroup; }
		
		//until=Until
		public Assignment getUntilAssignment_0() { return cUntilAssignment_0; }
		
		//Until
		public RuleCall getUntilUntilParserRuleCall_0_0() { return cUntilUntilParserRuleCall_0_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class WhileDoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.WhileDoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWhileAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWhileWhileParserRuleCall_0_0 = (RuleCall)cWhileAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//WhileDoStatement:
		//	while=While block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//while=While block=Block
		public Group getGroup() { return cGroup; }
		
		//while=While
		public Assignment getWhileAssignment_0() { return cWhileAssignment_0; }
		
		//While
		public RuleCall getWhileWhileParserRuleCall_0_0() { return cWhileWhileParserRuleCall_0_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class DoWhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.DoWhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Assignment cWhileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhileWhileParserRuleCall_2_0 = (RuleCall)cWhileAssignment_2.eContents().get(0);
		
		//DoWhileStatement:
		//	'do' block=Block while=While;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' block=Block while=While
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//while=While
		public Assignment getWhileAssignment_2() { return cWhileAssignment_2; }
		
		//While
		public RuleCall getWhileWhileParserRuleCall_2_0() { return cWhileWhileParserRuleCall_2_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//Repeat:
		//	'repeat' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' block=Block
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}
	public class RewardStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.RewardStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRewardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRewardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRewardNUMERICParserRuleCall_1_0 = (RuleCall)cRewardAssignment_1.eContents().get(0);
		
		//RewardStatement:
		//	'reward' reward=NUMERIC;
		@Override public ParserRule getRule() { return rule; }
		
		//'reward' reward=NUMERIC
		public Group getGroup() { return cGroup; }
		
		//'reward'
		public Keyword getRewardKeyword_0() { return cRewardKeyword_0; }
		
		//reward=NUMERIC
		public Assignment getRewardAssignment_1() { return cRewardAssignment_1; }
		
		//NUMERIC
		public RuleCall getRewardNUMERICParserRuleCall_1_0() { return cRewardNUMERICParserRuleCall_1_0; }
	}
	public class UntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Until");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUntilKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingsBindingsParserRuleCall_2_0 = (RuleCall)cBindingsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Until:
		//	'until' '(' bindings=Bindings ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'until' '(' bindings=Bindings ')'
		public Group getGroup() { return cGroup; }
		
		//'until'
		public Keyword getUntilKeyword_0() { return cUntilKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_2() { return cBindingsAssignment_2; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_2_0() { return cBindingsBindingsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingsBindingsParserRuleCall_2_0 = (RuleCall)cBindingsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//While:
		//	'while' '(' bindings=Bindings ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' bindings=Bindings ')'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_2() { return cBindingsAssignment_2; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_2_0() { return cBindingsBindingsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MatchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.MatchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCasesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCasesCaseStatementParserRuleCall_2_0 = (RuleCall)cCasesAssignment_2.eContents().get(0);
		private final Assignment cCasesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCasesCaseStatementParserRuleCall_3_0 = (RuleCall)cCasesAssignment_3.eContents().get(0);
		private final Keyword cDefaultKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultBlockBlockParserRuleCall_6_0 = (RuleCall)cDefaultBlockAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MatchStatement:
		//	'match' '{'
		//	cases+=CaseStatement
		//	cases+=CaseStatement*
		//	'default' ':' defaultBlock=Block
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'match' '{' cases+=CaseStatement cases+=CaseStatement* 'default' ':' defaultBlock=Block '}'
		public Group getGroup() { return cGroup; }
		
		//'match'
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//cases+=CaseStatement
		public Assignment getCasesAssignment_2() { return cCasesAssignment_2; }
		
		//CaseStatement
		public RuleCall getCasesCaseStatementParserRuleCall_2_0() { return cCasesCaseStatementParserRuleCall_2_0; }
		
		//cases+=CaseStatement*
		public Assignment getCasesAssignment_3() { return cCasesAssignment_3; }
		
		//CaseStatement
		public RuleCall getCasesCaseStatementParserRuleCall_3_0() { return cCasesCaseStatementParserRuleCall_3_0; }
		
		//'default'
		public Keyword getDefaultKeyword_4() { return cDefaultKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//defaultBlock=Block
		public Assignment getDefaultBlockAssignment_6() { return cDefaultBlockAssignment_6; }
		
		//Block
		public RuleCall getDefaultBlockBlockParserRuleCall_6_0() { return cDefaultBlockBlockParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBindingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBindingsBindingsParserRuleCall_1_0 = (RuleCall)cBindingsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPriorityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPriorityNUMERICParserRuleCall_2_1_0 = (RuleCall)cPriorityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//CaseStatement:
		//	'case' bindings=Bindings ('[' priority=NUMERIC ']')? ':' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' bindings=Bindings ('[' priority=NUMERIC ']')? ':' block=Block
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_1() { return cBindingsAssignment_1; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_1_0() { return cBindingsBindingsParserRuleCall_1_0; }
		
		//('[' priority=NUMERIC ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//priority=NUMERIC
		public Assignment getPriorityAssignment_2_1() { return cPriorityAssignment_2_1; }
		
		//NUMERIC
		public RuleCall getPriorityNUMERICParserRuleCall_2_1_0() { return cPriorityNUMERICParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//block=Block
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class OutputStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.OutputStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBindingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBindingsBindingsParserRuleCall_3_1_0 = (RuleCall)cBindingsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputStatement:
		//	'output' '(' string=STRING (',' bindings=Bindings)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'output' '(' string=STRING (',' bindings=Bindings)? ')'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }
		
		//(',' bindings=Bindings)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_3_1() { return cBindingsAssignment_3_1; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_3_1_0() { return cBindingsBindingsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ForLoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.ForLoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForcedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cForcedForceKeyword_0_0 = (Keyword)cForcedAssignment_0.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForBufferAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cForBufferBufferCrossReference_3_0 = (CrossReference)cForBufferAssignment_3.eContents().get(0);
		private final RuleCall cForBufferBufferIDTerminalRuleCall_3_0_1 = (RuleCall)cForBufferBufferCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInitialPatternCrossReference_5_0 = (CrossReference)cInitialAssignment_5.eContents().get(0);
		private final RuleCall cInitialPatternIDTerminalRuleCall_5_0_1 = (RuleCall)cInitialPatternCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInitialBindingsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInitialBindingsBindingsParserRuleCall_7_0 = (RuleCall)cInitialBindingsAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSubsequentAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cSubsequentPatternCrossReference_9_0 = (CrossReference)cSubsequentAssignment_9.eContents().get(0);
		private final RuleCall cSubsequentPatternIDTerminalRuleCall_9_0_1 = (RuleCall)cSubsequentPatternCrossReference_9_0.eContents().get(1);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSubsequentBindingsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSubsequentBindingsBindingsParserRuleCall_11_0 = (RuleCall)cSubsequentBindingsAssignment_11.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cBlockAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cBlockBlockParserRuleCall_13_0 = (RuleCall)cBlockAssignment_13.eContents().get(0);
		
		//ForLoopStatement:
		//	forced?='force'? 'for' '(' forBuffer=[Buffer] ',' initial=[Pattern] ',' initialBindings=Bindings ','
		//	subsequent=[Pattern] ',' subsequentBindings=Bindings ')'
		//	block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//forced?='force'? 'for' '(' forBuffer=[Buffer] ',' initial=[Pattern] ',' initialBindings=Bindings ','
		//subsequent=[Pattern] ',' subsequentBindings=Bindings ')' block=Block
		public Group getGroup() { return cGroup; }
		
		//forced?='force'?
		public Assignment getForcedAssignment_0() { return cForcedAssignment_0; }
		
		//'force'
		public Keyword getForcedForceKeyword_0_0() { return cForcedForceKeyword_0_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//forBuffer=[Buffer]
		public Assignment getForBufferAssignment_3() { return cForBufferAssignment_3; }
		
		//[Buffer]
		public CrossReference getForBufferBufferCrossReference_3_0() { return cForBufferBufferCrossReference_3_0; }
		
		//ID
		public RuleCall getForBufferBufferIDTerminalRuleCall_3_0_1() { return cForBufferBufferIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//initial=[Pattern]
		public Assignment getInitialAssignment_5() { return cInitialAssignment_5; }
		
		//[Pattern]
		public CrossReference getInitialPatternCrossReference_5_0() { return cInitialPatternCrossReference_5_0; }
		
		//ID
		public RuleCall getInitialPatternIDTerminalRuleCall_5_0_1() { return cInitialPatternIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//initialBindings=Bindings
		public Assignment getInitialBindingsAssignment_7() { return cInitialBindingsAssignment_7; }
		
		//Bindings
		public RuleCall getInitialBindingsBindingsParserRuleCall_7_0() { return cInitialBindingsBindingsParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//subsequent=[Pattern]
		public Assignment getSubsequentAssignment_9() { return cSubsequentAssignment_9; }
		
		//[Pattern]
		public CrossReference getSubsequentPatternCrossReference_9_0() { return cSubsequentPatternCrossReference_9_0; }
		
		//ID
		public RuleCall getSubsequentPatternIDTerminalRuleCall_9_0_1() { return cSubsequentPatternIDTerminalRuleCall_9_0_1; }
		
		//','
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//subsequentBindings=Bindings
		public Assignment getSubsequentBindingsAssignment_11() { return cSubsequentBindingsAssignment_11; }
		
		//Bindings
		public RuleCall getSubsequentBindingsBindingsParserRuleCall_11_0() { return cSubsequentBindingsBindingsParserRuleCall_11_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
		
		//block=Block
		public Assignment getBlockAssignment_13() { return cBlockAssignment_13; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_13_0() { return cBlockBlockParserRuleCall_13_0; }
	}
	public class IfThenElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.IfThenElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingsBindingsParserRuleCall_2_0 = (RuleCall)cBindingsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockBlockParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfThenElseStatement:
		//	'if' '(' bindings=Bindings ')' thenBlock=Block (=> 'else' elseBlock=Block)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' bindings=Bindings ')' thenBlock=Block (=> 'else' elseBlock=Block)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//bindings=Bindings
		public Assignment getBindingsAssignment_2() { return cBindingsAssignment_2; }
		
		//Bindings
		public RuleCall getBindingsBindingsParserRuleCall_2_0() { return cBindingsBindingsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=Block
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//Block
		public RuleCall getThenBlockBlockParserRuleCall_4_0() { return cThenBlockBlockParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
	}
	public class BindingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Bindings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingsBufferPatternParserRuleCall_0_0 = (RuleCall)cBindingsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBindingsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBindingsBufferPatternParserRuleCall_1_1_0 = (RuleCall)cBindingsAssignment_1_1.eContents().get(0);
		
		//Bindings:
		//	bindings+=BufferPattern ('&&' bindings+=BufferPattern)*;
		@Override public ParserRule getRule() { return rule; }
		
		//bindings+=BufferPattern ('&&' bindings+=BufferPattern)*
		public Group getGroup() { return cGroup; }
		
		//bindings+=BufferPattern
		public Assignment getBindingsAssignment_0() { return cBindingsAssignment_0; }
		
		//BufferPattern
		public RuleCall getBindingsBufferPatternParserRuleCall_0_0() { return cBindingsBufferPatternParserRuleCall_0_0; }
		
		//('&&' bindings+=BufferPattern)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//bindings+=BufferPattern
		public Assignment getBindingsAssignment_1_1() { return cBindingsAssignment_1_1; }
		
		//BufferPattern
		public RuleCall getBindingsBufferPatternParserRuleCall_1_1_0() { return cBindingsBufferPatternParserRuleCall_1_1_0; }
	}
	public class BufferPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.BufferPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBufferAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBufferBufferCrossReference_0_0 = (CrossReference)cBufferAssignment_0.eContents().get(0);
		private final RuleCall cBufferBufferIDTerminalRuleCall_0_0_1 = (RuleCall)cBufferBufferCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPatternPatternCrossReference_2_0 = (CrossReference)cPatternAssignment_2.eContents().get(0);
		private final RuleCall cPatternPatternIDTerminalRuleCall_2_0_1 = (RuleCall)cPatternPatternCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BufferPattern:
		//	buffer=[Buffer] '(' pattern=[Pattern]? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//buffer=[Buffer] '(' pattern=[Pattern]? ')'
		public Group getGroup() { return cGroup; }
		
		//buffer=[Buffer]
		public Assignment getBufferAssignment_0() { return cBufferAssignment_0; }
		
		//[Buffer]
		public CrossReference getBufferBufferCrossReference_0_0() { return cBufferBufferCrossReference_0_0; }
		
		//ID
		public RuleCall getBufferBufferIDTerminalRuleCall_0_0_1() { return cBufferBufferIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pattern=[Pattern]?
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//[Pattern]
		public CrossReference getPatternPatternCrossReference_2_0() { return cPatternPatternCrossReference_2_0; }
		
		//ID
		public RuleCall getPatternPatternIDTerminalRuleCall_2_0_1() { return cPatternPatternIDTerminalRuleCall_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentsAssignmentStatementParserRuleCall_2_0 = (RuleCall)cAssignmentsAssignment_2.eContents().get(0);
		
		//Mapping:
		//	{Mapping} '->' assignments+=AssignmentStatement+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapping} '->' assignments+=AssignmentStatement+
		public Group getGroup() { return cGroup; }
		
		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//assignments+=AssignmentStatement+
		public Assignment getAssignmentsAssignment_2() { return cAssignmentsAssignment_2; }
		
		//AssignmentStatement
		public RuleCall getAssignmentsAssignmentStatementParserRuleCall_2_0() { return cAssignmentsAssignmentStatementParserRuleCall_2_0; }
	}
	public class HandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mil.navy.nrl.ncarai.jasm.Program.Handler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHandlerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//Handler:
		//	{Handler} '=>' block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//{Handler} '=>' block=Block
		public Group getGroup() { return cGroup; }
		
		//{Handler}
		public Action getHandlerAction_0() { return cHandlerAction_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	
	
	private final ProgramElements pProgram;
	private final PackageDefElements pPackageDef;
	private final IncludeElements pInclude;
	private final BufferDefElements pBufferDef;
	private final RequestDefElements pRequestDef;
	private final GeneratorDefElements pGeneratorDef;
	private final PatternElements pPattern;
	private final FunctionElements pFunction;
	private final WithAsStatementElements pWithAsStatement;
	private final RetainAsStatementElements pRetainAsStatement;
	private final AsStatementElements pAsStatement;
	private final VariableStatementElements pVariableStatement;
	private final BlockElements pBlock;
	private final InsertionStatementElements pInsertionStatement;
	private final InstructionElements pInstruction;
	private final FunctionCallStatementElements pFunctionCallStatement;
	private final AssignmentStatementElements pAssignmentStatement;
	private final VariableReferenceElements pVariableReference;
	private final VariableValueElements pVariableValue;
	private final ReturnVariableReferenceElements pReturnVariableReference;
	private final ReturnStatementElements pReturnStatement;
	private final RemoveStatementElements pRemoveStatement;
	private final RequestStatementElements pRequestStatement;
	private final RepeatUntilStatementElements pRepeatUntilStatement;
	private final UntilRepeatStatementElements pUntilRepeatStatement;
	private final WhileDoStatementElements pWhileDoStatement;
	private final DoWhileStatementElements pDoWhileStatement;
	private final RepeatElements pRepeat;
	private final RewardStatementElements pRewardStatement;
	private final UntilElements pUntil;
	private final WhileElements pWhile;
	private final MatchStatementElements pMatchStatement;
	private final CaseStatementElements pCaseStatement;
	private final OutputStatementElements pOutputStatement;
	private final ForLoopStatementElements pForLoopStatement;
	private final IfThenElseStatementElements pIfThenElseStatement;
	private final BindingsElements pBindings;
	private final BufferPatternElements pBufferPattern;
	private final MappingElements pMapping;
	private final HandlerElements pHandler;
	
	private final Grammar grammar;
	
	private final ModelFragmentGrammarAccess gaModelFragment;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProgramGrammarAccess(GrammarProvider grammarProvider,
			ModelFragmentGrammarAccess gaModelFragment,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaModelFragment = gaModelFragment;
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pPackageDef = new PackageDefElements();
		this.pInclude = new IncludeElements();
		this.pBufferDef = new BufferDefElements();
		this.pRequestDef = new RequestDefElements();
		this.pGeneratorDef = new GeneratorDefElements();
		this.pPattern = new PatternElements();
		this.pFunction = new FunctionElements();
		this.pWithAsStatement = new WithAsStatementElements();
		this.pRetainAsStatement = new RetainAsStatementElements();
		this.pAsStatement = new AsStatementElements();
		this.pVariableStatement = new VariableStatementElements();
		this.pBlock = new BlockElements();
		this.pInsertionStatement = new InsertionStatementElements();
		this.pInstruction = new InstructionElements();
		this.pFunctionCallStatement = new FunctionCallStatementElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pVariableReference = new VariableReferenceElements();
		this.pVariableValue = new VariableValueElements();
		this.pReturnVariableReference = new ReturnVariableReferenceElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pRemoveStatement = new RemoveStatementElements();
		this.pRequestStatement = new RequestStatementElements();
		this.pRepeatUntilStatement = new RepeatUntilStatementElements();
		this.pUntilRepeatStatement = new UntilRepeatStatementElements();
		this.pWhileDoStatement = new WhileDoStatementElements();
		this.pDoWhileStatement = new DoWhileStatementElements();
		this.pRepeat = new RepeatElements();
		this.pRewardStatement = new RewardStatementElements();
		this.pUntil = new UntilElements();
		this.pWhile = new WhileElements();
		this.pMatchStatement = new MatchStatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pOutputStatement = new OutputStatementElements();
		this.pForLoopStatement = new ForLoopStatementElements();
		this.pIfThenElseStatement = new IfThenElseStatementElements();
		this.pBindings = new BindingsElements();
		this.pBufferPattern = new BufferPatternElements();
		this.pMapping = new MappingElements();
		this.pHandler = new HandlerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mil.navy.nrl.ncarai.jasm.Program".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public ModelFragmentGrammarAccess getModelFragmentGrammarAccess() {
		return gaModelFragment;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	package=PackageDef;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//PackageDef:
	//	'namespace' name=QualifiedName 'target' target=QualifiedName '{' (imports+=Import | includes+=Include)* //used for jasm
	//	generator=GeneratorDef?
	//	bufferDefs+=BufferDef* (chunkTypes+=ChunkType | chunkDefs+=Chunks | patterns+=Pattern | functions+=Function)*
	//	'}';
	public PackageDefElements getPackageDefAccess() {
		return pPackageDef;
	}
	
	public ParserRule getPackageDefRule() {
		return getPackageDefAccess().getRule();
	}
	
	//Include:
	//	'include' importedNamespace=QualifiedNameWithWildcard;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}
	
	//BufferDef:
	//	name=ID (readable?='readable' | writable?='writable')? error?='error'? 'requests' requests+=RequestDef (','
	//	requests+=RequestDef)*;
	public BufferDefElements getBufferDefAccess() {
		return pBufferDef;
	}
	
	public ParserRule getBufferDefRule() {
		return getBufferDefAccess().getRule();
	}
	
	//RequestDef:
	//	(wildcardRequest?='*' | requestType=[ChunkType]) '->' (wildcardResult?='*' | resultType=[ChunkType])?;
	public RequestDefElements getRequestDefAccess() {
		return pRequestDef;
	}
	
	public ParserRule getRequestDefRule() {
		return getRequestDefAccess().getRule();
	}
	
	//GeneratorDef:
	//	'@generator' parameters=ParametersBlock;
	public GeneratorDefElements getGeneratorDefAccess() {
		return pGeneratorDef;
	}
	
	public ParserRule getGeneratorDefRule() {
		return getGeneratorDefAccess().getRule();
	}
	
	//Pattern:
	//	name=ID '=' '{' ('isa' type=ID)? //why not [ChunkType] because we need to match to functions too, 
	//	slots+=ConditionalSlot* //and trying to do both will screw the parser
	//	'}';
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Function:
	//	'function' (void?='void' | chunk?='element') name=ID '(' (slots+=VariableStatement (','
	//	slots+=VariableStatement)*)?
	//	')' assumedContents=WithAsStatement? retainedContents=RetainAsStatement? '{'
	//	variables+=VariableStatement*
	//	instructions+=Instruction+
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//WithAsStatement:
	//	'with' assumed+=AsStatement (',' assumed+=AsStatement)*;
	public WithAsStatementElements getWithAsStatementAccess() {
		return pWithAsStatement;
	}
	
	public ParserRule getWithAsStatementRule() {
		return getWithAsStatementAccess().getRule();
	}
	
	//RetainAsStatement:
	//	'retain' retained+=AsStatement (',' retained+=AsStatement)*;
	public RetainAsStatementElements getRetainAsStatementAccess() {
		return pRetainAsStatement;
	}
	
	public ParserRule getRetainAsStatementRule() {
		return getRetainAsStatementAccess().getRule();
	}
	
	//AsStatement:
	//	buffer=[Buffer] 'as' type=ID;
	public AsStatementElements getAsStatementAccess() {
		return pAsStatement;
	}
	
	public ParserRule getAsStatementRule() {
		return getAsStatementAccess().getRule();
	}
	
	//VariableStatement:
	//	'slot' assignment=AssignmentStatement;
	public VariableStatementElements getVariableStatementAccess() {
		return pVariableStatement;
	}
	
	public ParserRule getVariableStatementRule() {
		return getVariableStatementAccess().getRule();
	}
	
	//Block:
	//	{Block} '{'
	//	instructions+=Instruction+
	//	'}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//InsertionStatement:
	//	'<[' entryState=ID ',' exitState=ID (',' shouldGenerate?='generate')? ']>';
	public InsertionStatementElements getInsertionStatementAccess() {
		return pInsertionStatement;
	}
	
	public ParserRule getInsertionStatementRule() {
		return getInsertionStatementAccess().getRule();
	}
	
	//Instruction:
	//	ForLoopStatement | IfThenElseStatement | RequestStatement | FunctionCallStatement | ReturnStatement | MatchStatement |
	//	OutputStatement | AssignmentStatement | RemoveStatement | WhileDoStatement | DoWhileStatement | InsertionStatement |
	//	RepeatUntilStatement | UntilRepeatStatement | RewardStatement;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//FunctionCallStatement:
	//	function=[Function] '(' (parameters+=AssignmentStatement (',' parameters+=AssignmentStatement)*)? ')';
	public FunctionCallStatementElements getFunctionCallStatementAccess() {
		return pFunctionCallStatement;
	}
	
	public ParserRule getFunctionCallStatementRule() {
		return getFunctionCallStatementAccess().getRule();
	}
	
	//AssignmentStatement:
	//	reference=VariableReference
	//	'='
	//	assignment=VariableValue;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}
	
	//VariableReference:
	//	(buffer=[Buffer] '.')? name=ID;
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//VariableValue:
	//	(buffer=[Buffer] '.')? value=Value | functionCall=FunctionCallStatement;
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}
	
	//ReturnVariableReference:
	//	(buffer=[Buffer] '.')? value=Value;
	public ReturnVariableReferenceElements getReturnVariableReferenceAccess() {
		return pReturnVariableReference;
	}
	
	public ParserRule getReturnVariableReferenceRule() {
		return getReturnVariableReferenceAccess().getRule();
	}
	
	//ReturnStatement:
	//	{ReturnStatement} 'return' reference=ReturnVariableReference?;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//RemoveStatement:
	//	'remove' buffers+=[Buffer] (',' buffers+=[Buffer])*;
	public RemoveStatementElements getRemoveStatementAccess() {
		return pRemoveStatement;
	}
	
	public ParserRule getRemoveStatementRule() {
		return getRemoveStatementAccess().getRule();
	}
	
	//RequestStatement:
	//	forced?='force'? 'request' buffer=[Buffer] '('
	//	patternReference=VariableReference? ')' (',' bindings=Bindings)? ('as'
	//	cast=ID)? mapping=Mapping? handler=Handler?;
	public RequestStatementElements getRequestStatementAccess() {
		return pRequestStatement;
	}
	
	public ParserRule getRequestStatementRule() {
		return getRequestStatementAccess().getRule();
	}
	
	//RepeatUntilStatement:
	//	repeat=Repeat until=Until;
	public RepeatUntilStatementElements getRepeatUntilStatementAccess() {
		return pRepeatUntilStatement;
	}
	
	public ParserRule getRepeatUntilStatementRule() {
		return getRepeatUntilStatementAccess().getRule();
	}
	
	//UntilRepeatStatement:
	//	until=Until block=Block;
	public UntilRepeatStatementElements getUntilRepeatStatementAccess() {
		return pUntilRepeatStatement;
	}
	
	public ParserRule getUntilRepeatStatementRule() {
		return getUntilRepeatStatementAccess().getRule();
	}
	
	//WhileDoStatement:
	//	while=While block=Block;
	public WhileDoStatementElements getWhileDoStatementAccess() {
		return pWhileDoStatement;
	}
	
	public ParserRule getWhileDoStatementRule() {
		return getWhileDoStatementAccess().getRule();
	}
	
	//DoWhileStatement:
	//	'do' block=Block while=While;
	public DoWhileStatementElements getDoWhileStatementAccess() {
		return pDoWhileStatement;
	}
	
	public ParserRule getDoWhileStatementRule() {
		return getDoWhileStatementAccess().getRule();
	}
	
	//Repeat:
	//	'repeat' block=Block;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//RewardStatement:
	//	'reward' reward=NUMERIC;
	public RewardStatementElements getRewardStatementAccess() {
		return pRewardStatement;
	}
	
	public ParserRule getRewardStatementRule() {
		return getRewardStatementAccess().getRule();
	}
	
	//Until:
	//	'until' '(' bindings=Bindings ')';
	public UntilElements getUntilAccess() {
		return pUntil;
	}
	
	public ParserRule getUntilRule() {
		return getUntilAccess().getRule();
	}
	
	//While:
	//	'while' '(' bindings=Bindings ')';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//MatchStatement:
	//	'match' '{'
	//	cases+=CaseStatement
	//	cases+=CaseStatement*
	//	'default' ':' defaultBlock=Block
	//	'}';
	public MatchStatementElements getMatchStatementAccess() {
		return pMatchStatement;
	}
	
	public ParserRule getMatchStatementRule() {
		return getMatchStatementAccess().getRule();
	}
	
	//CaseStatement:
	//	'case' bindings=Bindings ('[' priority=NUMERIC ']')? ':' block=Block;
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//OutputStatement:
	//	'output' '(' string=STRING (',' bindings=Bindings)? ')';
	public OutputStatementElements getOutputStatementAccess() {
		return pOutputStatement;
	}
	
	public ParserRule getOutputStatementRule() {
		return getOutputStatementAccess().getRule();
	}
	
	//ForLoopStatement:
	//	forced?='force'? 'for' '(' forBuffer=[Buffer] ',' initial=[Pattern] ',' initialBindings=Bindings ','
	//	subsequent=[Pattern] ',' subsequentBindings=Bindings ')'
	//	block=Block;
	public ForLoopStatementElements getForLoopStatementAccess() {
		return pForLoopStatement;
	}
	
	public ParserRule getForLoopStatementRule() {
		return getForLoopStatementAccess().getRule();
	}
	
	//IfThenElseStatement:
	//	'if' '(' bindings=Bindings ')' thenBlock=Block (=> 'else' elseBlock=Block)?;
	public IfThenElseStatementElements getIfThenElseStatementAccess() {
		return pIfThenElseStatement;
	}
	
	public ParserRule getIfThenElseStatementRule() {
		return getIfThenElseStatementAccess().getRule();
	}
	
	//Bindings:
	//	bindings+=BufferPattern ('&&' bindings+=BufferPattern)*;
	public BindingsElements getBindingsAccess() {
		return pBindings;
	}
	
	public ParserRule getBindingsRule() {
		return getBindingsAccess().getRule();
	}
	
	//BufferPattern:
	//	buffer=[Buffer] '(' pattern=[Pattern]? ')';
	public BufferPatternElements getBufferPatternAccess() {
		return pBufferPattern;
	}
	
	public ParserRule getBufferPatternRule() {
		return getBufferPatternAccess().getRule();
	}
	
	//Mapping:
	//	{Mapping} '->' assignments+=AssignmentStatement+;
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Handler:
	//	{Handler} '=>' block=Block;
	public HandlerElements getHandlerAccess() {
		return pHandler;
	}
	
	public ParserRule getHandlerRule() {
		return getHandlerAccess().getRule();
	}
	
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
	//ModelFragment:
	//	package=PackageDeclaration;
	public ModelFragmentGrammarAccess.ModelFragmentElements getModelFragmentAccess() {
		return gaModelFragment.getModelFragmentAccess();
	}
	
	public ParserRule getModelFragmentRule() {
		return getModelFragmentAccess().getRule();
	}
	
	//PackageDeclaration:
	//	'namespace' name=QualifiedName '{'
	//	imports+=Import*
	//	modules+=ModelModule*
	//	extensions+=ModelExtension*
	//	buffers=Buffers?
	//	elements+=Element*
	//	'}'
	//	parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.PackageDeclarationElements getPackageDeclarationAccess() {
		return gaModelFragment.getPackageDeclarationAccess();
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ModelFragmentGrammarAccess.ImportElements getImportAccess() {
		return gaModelFragment.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ModelModule:
	//	'module' moduleClass=STRING parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.ModelModuleElements getModelModuleAccess() {
		return gaModelFragment.getModelModuleAccess();
	}
	
	public ParserRule getModelModuleRule() {
		return getModelModuleAccess().getRule();
	}
	
	//ModelExtension:
	//	'extension' extensionClass=STRING parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.ModelExtensionElements getModelExtensionAccess() {
		return gaModelFragment.getModelExtensionAccess();
	}
	
	public ParserRule getModelExtensionRule() {
		return getModelExtensionAccess().getRule();
	}
	
	//Element:
	//	ChunkType | Chunks | Production | Parameters;
	public ModelFragmentGrammarAccess.ElementElements getElementAccess() {
		return gaModelFragment.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Parameters:
	//	'parameters' '(' elements+=ID (',' elements+=ID)* ')' parameters=ParametersBlock;
	public ModelFragmentGrammarAccess.ParametersElements getParametersAccess() {
		return gaModelFragment.getParametersAccess();
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Chunks:
	//	type=[ChunkType|QualifiedName] chunks+=ChunkDef (',' chunks+=ChunkDef)*;
	public ModelFragmentGrammarAccess.ChunksElements getChunksAccess() {
		return gaModelFragment.getChunksAccess();
	}
	
	public ParserRule getChunksRule() {
		return getChunksAccess().getRule();
	}
	
	//ChunkDef:
	//	Overridable
	//	name=ID ('(' slots+=SimpleSlot (',' slots+=SimpleSlot)* ')')?
	//	parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.ChunkDefElements getChunkDefAccess() {
		return gaModelFragment.getChunkDefAccess();
	}
	
	public ParserRule getChunkDefRule() {
		return getChunkDefAccess().getRule();
	}
	
	//ChunkType:
	//	Overridable
	//	'chunktype' name=ID ('extends' superType=[ChunkType|QualifiedName])?
	//	'{'
	//	slots+=SimpleSlot* '}'
	//	parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.ChunkTypeElements getChunkTypeAccess() {
		return gaModelFragment.getChunkTypeAccess();
	}
	
	public ParserRule getChunkTypeRule() {
		return getChunkTypeAccess().getRule();
	}
	
	////@Override
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*';
	public ModelFragmentGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaModelFragment.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	////@Override
	//QualifiedName:
	//	ID ('.' ID)*;
	public ModelFragmentGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaModelFragment.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//fragment Overridable:
	//	override?=OVERRIDE?;
	public ModelFragmentGrammarAccess.OverridableElements getOverridableAccess() {
		return gaModelFragment.getOverridableAccess();
	}
	
	public ParserRule getOverridableRule() {
		return getOverridableAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | ':') ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' | '_')* ('a'..'z' | 'A'..'Z' | '0'..'9');
	public TerminalRule getIDRule() {
		return gaModelFragment.getIDRule();
	}
	
	////terminal VARIABLE:
	////  '='  ('a'..'z' | 'A'..'Z' | '0'..'9' | '-' )* ('a'..'z' | 'A'..'Z' | '0'..'9');
	//Buffers:
	//	{Buffers} 'buffers' '{' buffers+=Buffer* '}';
	public ModelFragmentGrammarAccess.BuffersElements getBuffersAccess() {
		return gaModelFragment.getBuffersAccess();
	}
	
	public ParserRule getBuffersRule() {
		return getBuffersAccess().getRule();
	}
	
	///**
	// * Buffer block
	// */ Buffer:
	//	Overridable
	//	name=ID '{'
	//	source+=[ChunkDef|QualifiedName]*
	//	'}' parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.BufferElements getBufferAccess() {
		return gaModelFragment.getBufferAccess();
	}
	
	public ParserRule getBufferRule() {
		return getBufferAccess().getRule();
	}
	
	///**
	// * Productions
	// */ Production:
	//	Overridable
	//	'production' name=ID '{'
	//	conditions+=ProductionCondition+
	//	'}' '{'
	//	actions+=ProductionAction+
	//	'}' parameters=ParametersBlock?;
	public ModelFragmentGrammarAccess.ProductionElements getProductionAccess() {
		return gaModelFragment.getProductionAccess();
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}
	
	//ProductionCondition:
	//	Match | Query | Script | Proxy;
	public ModelFragmentGrammarAccess.ProductionConditionElements getProductionConditionAccess() {
		return gaModelFragment.getProductionConditionAccess();
	}
	
	public ParserRule getProductionConditionRule() {
		return getProductionConditionAccess().getRule();
	}
	
	//Match:
	//	name=[Buffer] '{'
	//	isa=IsaBlock
	//	slots+=ComplexSlot*
	//	'}';
	public ModelFragmentGrammarAccess.MatchElements getMatchAccess() {
		return gaModelFragment.getMatchAccess();
	}
	
	public ParserRule getMatchRule() {
		return getMatchAccess().getRule();
	}
	
	//Query:
	//	'?' name=[Buffer] '{'
	//	slots+=ComplexSlot*
	//	'}';
	public ModelFragmentGrammarAccess.QueryElements getQueryAccess() {
		return gaModelFragment.getQueryAccess();
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//Proxy:
	//	'proxy' '(' name=STRING ')' '{'
	//	slots+=SimpleSlot*
	//	'}';
	public ModelFragmentGrammarAccess.ProxyElements getProxyAccess() {
		return gaModelFragment.getProxyAccess();
	}
	
	public ParserRule getProxyRule() {
		return getProxyAccess().getRule();
	}
	
	//Script:
	//	'script' '(' language=STRING ')' script=CODE;
	public ModelFragmentGrammarAccess.ScriptElements getScriptAccess() {
		return gaModelFragment.getScriptAccess();
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//ProductionAction:
	//	Add | Remove | Modify | Script | Proxy | Output;
	public ModelFragmentGrammarAccess.ProductionActionElements getProductionActionAccess() {
		return gaModelFragment.getProductionActionAccess();
	}
	
	public ParserRule getProductionActionRule() {
		return getProductionActionAccess().getRule();
	}
	
	//Add:
	//	'+' name=[Buffer] '{'
	//	isa=IsaBlock
	//	slots+=ConditionalSlot*
	//	'}';
	public ModelFragmentGrammarAccess.AddElements getAddAccess() {
		return gaModelFragment.getAddAccess();
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Remove:
	//	'-' SimpleSlotBlock;
	public ModelFragmentGrammarAccess.RemoveElements getRemoveAccess() {
		return gaModelFragment.getRemoveAccess();
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}
	
	//Modify:
	//	SimpleSlotBlock;
	public ModelFragmentGrammarAccess.ModifyElements getModifyAccess() {
		return gaModelFragment.getModifyAccess();
	}
	
	public ParserRule getModifyRule() {
		return getModifyAccess().getRule();
	}
	
	//Output:
	//	'output' '(' string=STRING ')';
	public ModelFragmentGrammarAccess.OutputElements getOutputAccess() {
		return gaModelFragment.getOutputAccess();
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//fragment SimpleSlotBlock:
	//	name=[Buffer] '{' slots+=SimpleSlot* '}';
	public ModelFragmentGrammarAccess.SimpleSlotBlockElements getSimpleSlotBlockAccess() {
		return gaModelFragment.getSimpleSlotBlockAccess();
	}
	
	public ParserRule getSimpleSlotBlockRule() {
		return getSimpleSlotBlockAccess().getRule();
	}
	
	//IsaBlock:
	//	'isa' type=[ChunkType|QualifiedName] | chunk=[ChunkDef|QualifiedName] | name=VARIABLE;
	public ModelFragmentGrammarAccess.IsaBlockElements getIsaBlockAccess() {
		return gaModelFragment.getIsaBlockAccess();
	}
	
	public ParserRule getIsaBlockRule() {
		return getIsaBlockAccess().getRule();
	}
	
	////  (=>Value) | ChunkDef | ChunkType;
	////VariableReference : variable=VARIABLE;
	////  /*
	//// * Slots
	//// */
	//SimpleSlot:
	//	name=ID '=' value=Value;
	public ModelFragmentGrammarAccess.SimpleSlotElements getSimpleSlotAccess() {
		return gaModelFragment.getSimpleSlotAccess();
	}
	
	public ParserRule getSimpleSlotRule() {
		return getSimpleSlotAccess().getRule();
	}
	
	//enum Condition:
	//	EQUALS='=' | LT='<' | LTE='<=' | GT='>' | GTE='>=' | NOT='!=';
	public ModelFragmentGrammarAccess.ConditionElements getConditionAccess() {
		return gaModelFragment.getConditionAccess();
	}
	
	public EnumRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ComplexSlot:
	//	BooleanOperation | ConditionalSlot;
	public ModelFragmentGrammarAccess.ComplexSlotElements getComplexSlotAccess() {
		return gaModelFragment.getComplexSlotAccess();
	}
	
	public ParserRule getComplexSlotRule() {
		return getComplexSlotAccess().getRule();
	}
	
	//BooleanOperation:
	//	OrSlot | NotSlot | AndSlot;
	public ModelFragmentGrammarAccess.BooleanOperationElements getBooleanOperationAccess() {
		return gaModelFragment.getBooleanOperationAccess();
	}
	
	public ParserRule getBooleanOperationRule() {
		return getBooleanOperationAccess().getRule();
	}
	
	//ConditionalSlot:
	//	name=(ID | VARIABLE) condition=Condition value=Value;
	public ModelFragmentGrammarAccess.ConditionalSlotElements getConditionalSlotAccess() {
		return gaModelFragment.getConditionalSlotAccess();
	}
	
	public ParserRule getConditionalSlotRule() {
		return getConditionalSlotAccess().getRule();
	}
	
	//OrSlot:
	//	{OrSlot} 'or' '{' slots+=ComplexSlot* '}';
	public ModelFragmentGrammarAccess.OrSlotElements getOrSlotAccess() {
		return gaModelFragment.getOrSlotAccess();
	}
	
	public ParserRule getOrSlotRule() {
		return getOrSlotAccess().getRule();
	}
	
	//AndSlot:
	//	{AndSlot} 'and' '{' slots+=ComplexSlot* '}';
	public ModelFragmentGrammarAccess.AndSlotElements getAndSlotAccess() {
		return gaModelFragment.getAndSlotAccess();
	}
	
	public ParserRule getAndSlotRule() {
		return getAndSlotAccess().getRule();
	}
	
	//NotSlot:
	//	{NotSlot} 'not' '{' slots+=ComplexSlot* '}';
	public ModelFragmentGrammarAccess.NotSlotElements getNotSlotAccess() {
		return gaModelFragment.getNotSlotAccess();
	}
	
	public ParserRule getNotSlotRule() {
		return getNotSlotAccess().getRule();
	}
	
	///*
	//   * parameter block
	//   */ Parameter:
	//	name=STRING ':' value=Value;
	public ModelFragmentGrammarAccess.ParameterElements getParameterAccess() {
		return gaModelFragment.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParametersBlock:
	//	{ParametersBlock} '[' parameter+=Parameter* ']';
	public ModelFragmentGrammarAccess.ParametersBlockElements getParametersBlockAccess() {
		return gaModelFragment.getParametersBlockAccess();
	}
	
	public ParserRule getParametersBlockRule() {
		return getParametersBlockAccess().getRule();
	}
	
	//Value:
	//	{Value} name=(VARIABLE | ID | NULL) | string=STRING | number=NUMERIC | boolean=BOOLEAN;
	public ModelFragmentGrammarAccess.ValueElements getValueAccess() {
		return gaModelFragment.getValueAccess();
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//// value = [SlotValueReference | QualifiedName];
	////ValueReference : ChunkDef | ChunkType | Production | Buffer | VariableReference;
	////PrimitiveReference : NullReference | BooleanReference | NumberReference | StringReference;
	////SlotValueReference : ValueReference | PrimitiveReference;
	///*
	//   * Constant values
	//   */ //NullReference : null?=NULL;
	////BooleanReference : boolean=BOOLEAN;
	////NumberReference : value=NUMERIC;
	////StringReference : string=STRING;
	//VARIABLE:
	//	'=' ID;
	public ModelFragmentGrammarAccess.VARIABLEElements getVARIABLEAccess() {
		return gaModelFragment.getVARIABLEAccess();
	}
	
	public ParserRule getVARIABLERule() {
		return getVARIABLEAccess().getRule();
	}
	
	//NULL:
	//	'null';
	public ModelFragmentGrammarAccess.NULLElements getNULLAccess() {
		return gaModelFragment.getNULLAccess();
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}
	
	//BOOLEAN ecore::EBooleanObject:
	//	'true' | 'false';
	public ModelFragmentGrammarAccess.BOOLEANElements getBOOLEANAccess() {
		return gaModelFragment.getBOOLEANAccess();
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//NUMERIC ecore::EDoubleObject:
	//	'-'? DIGITS ('.' DIGITS)?;
	public ModelFragmentGrammarAccess.NUMERICElements getNUMERICAccess() {
		return gaModelFragment.getNUMERICAccess();
	}
	
	public ParserRule getNUMERICRule() {
		return getNUMERICAccess().getRule();
	}
	
	//OVERRIDE:
	//	'@Override';
	public ModelFragmentGrammarAccess.OVERRIDEElements getOVERRIDEAccess() {
		return gaModelFragment.getOVERRIDEAccess();
	}
	
	public ParserRule getOVERRIDERule() {
		return getOVERRIDEAccess().getRule();
	}
	
	//terminal DIGITS:
	//	'0'..'9'+;
	public TerminalRule getDIGITSRule() {
		return gaModelFragment.getDIGITSRule();
	}
	
	//terminal CODE:
	//	'<[['->']]>';
	public TerminalRule getCODERule() {
		return gaModelFragment.getCODERule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
