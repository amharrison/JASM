/**
 * generated by Xtext 2.20.0
 */
package mil.navy.nrl.ncarai.jasm.program.impl;

import mil.navy.nrl.ncarai.jasm.program.ProgramPackage;
import mil.navy.nrl.ncarai.jasm.program.RequestDef;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.jactr.io2.jactr.modelFragment.ChunkType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Request Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.RequestDefImpl#isWildcardRequest <em>Wildcard Request</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.RequestDefImpl#getRequestType <em>Request Type</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.RequestDefImpl#isWildcardResult <em>Wildcard Result</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.RequestDefImpl#getResultType <em>Result Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequestDefImpl extends MinimalEObjectImpl.Container implements RequestDef
{
  /**
   * The default value of the '{@link #isWildcardRequest() <em>Wildcard Request</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWildcardRequest()
   * @generated
   * @ordered
   */
  protected static final boolean WILDCARD_REQUEST_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWildcardRequest() <em>Wildcard Request</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWildcardRequest()
   * @generated
   * @ordered
   */
  protected boolean wildcardRequest = WILDCARD_REQUEST_EDEFAULT;

  /**
   * The cached value of the '{@link #getRequestType() <em>Request Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequestType()
   * @generated
   * @ordered
   */
  protected ChunkType requestType;

  /**
   * The default value of the '{@link #isWildcardResult() <em>Wildcard Result</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWildcardResult()
   * @generated
   * @ordered
   */
  protected static final boolean WILDCARD_RESULT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isWildcardResult() <em>Wildcard Result</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isWildcardResult()
   * @generated
   * @ordered
   */
  protected boolean wildcardResult = WILDCARD_RESULT_EDEFAULT;

  /**
   * The cached value of the '{@link #getResultType() <em>Result Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResultType()
   * @generated
   * @ordered
   */
  protected ChunkType resultType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequestDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProgramPackage.Literals.REQUEST_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isWildcardRequest()
  {
    return wildcardRequest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWildcardRequest(boolean newWildcardRequest)
  {
    boolean oldWildcardRequest = wildcardRequest;
    wildcardRequest = newWildcardRequest;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.REQUEST_DEF__WILDCARD_REQUEST, oldWildcardRequest, wildcardRequest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChunkType getRequestType()
  {
    if (requestType != null && requestType.eIsProxy())
    {
      InternalEObject oldRequestType = (InternalEObject)requestType;
      requestType = (ChunkType)eResolveProxy(oldRequestType);
      if (requestType != oldRequestType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProgramPackage.REQUEST_DEF__REQUEST_TYPE, oldRequestType, requestType));
      }
    }
    return requestType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChunkType basicGetRequestType()
  {
    return requestType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRequestType(ChunkType newRequestType)
  {
    ChunkType oldRequestType = requestType;
    requestType = newRequestType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.REQUEST_DEF__REQUEST_TYPE, oldRequestType, requestType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isWildcardResult()
  {
    return wildcardResult;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWildcardResult(boolean newWildcardResult)
  {
    boolean oldWildcardResult = wildcardResult;
    wildcardResult = newWildcardResult;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.REQUEST_DEF__WILDCARD_RESULT, oldWildcardResult, wildcardResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChunkType getResultType()
  {
    if (resultType != null && resultType.eIsProxy())
    {
      InternalEObject oldResultType = (InternalEObject)resultType;
      resultType = (ChunkType)eResolveProxy(oldResultType);
      if (resultType != oldResultType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProgramPackage.REQUEST_DEF__RESULT_TYPE, oldResultType, resultType));
      }
    }
    return resultType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChunkType basicGetResultType()
  {
    return resultType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setResultType(ChunkType newResultType)
  {
    ChunkType oldResultType = resultType;
    resultType = newResultType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.REQUEST_DEF__RESULT_TYPE, oldResultType, resultType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProgramPackage.REQUEST_DEF__WILDCARD_REQUEST:
        return isWildcardRequest();
      case ProgramPackage.REQUEST_DEF__REQUEST_TYPE:
        if (resolve) return getRequestType();
        return basicGetRequestType();
      case ProgramPackage.REQUEST_DEF__WILDCARD_RESULT:
        return isWildcardResult();
      case ProgramPackage.REQUEST_DEF__RESULT_TYPE:
        if (resolve) return getResultType();
        return basicGetResultType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProgramPackage.REQUEST_DEF__WILDCARD_REQUEST:
        setWildcardRequest((Boolean)newValue);
        return;
      case ProgramPackage.REQUEST_DEF__REQUEST_TYPE:
        setRequestType((ChunkType)newValue);
        return;
      case ProgramPackage.REQUEST_DEF__WILDCARD_RESULT:
        setWildcardResult((Boolean)newValue);
        return;
      case ProgramPackage.REQUEST_DEF__RESULT_TYPE:
        setResultType((ChunkType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProgramPackage.REQUEST_DEF__WILDCARD_REQUEST:
        setWildcardRequest(WILDCARD_REQUEST_EDEFAULT);
        return;
      case ProgramPackage.REQUEST_DEF__REQUEST_TYPE:
        setRequestType((ChunkType)null);
        return;
      case ProgramPackage.REQUEST_DEF__WILDCARD_RESULT:
        setWildcardResult(WILDCARD_RESULT_EDEFAULT);
        return;
      case ProgramPackage.REQUEST_DEF__RESULT_TYPE:
        setResultType((ChunkType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProgramPackage.REQUEST_DEF__WILDCARD_REQUEST:
        return wildcardRequest != WILDCARD_REQUEST_EDEFAULT;
      case ProgramPackage.REQUEST_DEF__REQUEST_TYPE:
        return requestType != null;
      case ProgramPackage.REQUEST_DEF__WILDCARD_RESULT:
        return wildcardResult != WILDCARD_RESULT_EDEFAULT;
      case ProgramPackage.REQUEST_DEF__RESULT_TYPE:
        return resultType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (wildcardRequest: ");
    result.append(wildcardRequest);
    result.append(", wildcardResult: ");
    result.append(wildcardResult);
    result.append(')');
    return result.toString();
  }

} //RequestDefImpl
