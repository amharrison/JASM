/**
 * generated by Xtext 2.20.0
 */
package mil.navy.nrl.ncarai.jasm.program.impl;

import java.util.Collection;

import mil.navy.nrl.ncarai.jasm.program.BufferDef;
import mil.navy.nrl.ncarai.jasm.program.Function;
import mil.navy.nrl.ncarai.jasm.program.GeneratorDef;
import mil.navy.nrl.ncarai.jasm.program.Include;
import mil.navy.nrl.ncarai.jasm.program.PackageDef;
import mil.navy.nrl.ncarai.jasm.program.Pattern;
import mil.navy.nrl.ncarai.jasm.program.ProgramPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.jactr.io2.jactr.modelFragment.ChunkType;
import org.jactr.io2.jactr.modelFragment.Chunks;
import org.jactr.io2.jactr.modelFragment.Import;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Package Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getName <em>Name</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getIncludes <em>Includes</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getGenerator <em>Generator</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getBufferDefs <em>Buffer Defs</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getChunkTypes <em>Chunk Types</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getChunkDefs <em>Chunk Defs</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getPatterns <em>Patterns</em>}</li>
 *   <li>{@link mil.navy.nrl.ncarai.jasm.program.impl.PackageDefImpl#getFunctions <em>Functions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PackageDefImpl extends MinimalEObjectImpl.Container implements PackageDef
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected static final String TARGET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected String target = TARGET_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getIncludes() <em>Includes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludes()
   * @generated
   * @ordered
   */
  protected EList<Include> includes;

  /**
   * The cached value of the '{@link #getGenerator() <em>Generator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenerator()
   * @generated
   * @ordered
   */
  protected GeneratorDef generator;

  /**
   * The cached value of the '{@link #getBufferDefs() <em>Buffer Defs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBufferDefs()
   * @generated
   * @ordered
   */
  protected EList<BufferDef> bufferDefs;

  /**
   * The cached value of the '{@link #getChunkTypes() <em>Chunk Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChunkTypes()
   * @generated
   * @ordered
   */
  protected EList<ChunkType> chunkTypes;

  /**
   * The cached value of the '{@link #getChunkDefs() <em>Chunk Defs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChunkDefs()
   * @generated
   * @ordered
   */
  protected EList<Chunks> chunkDefs;

  /**
   * The cached value of the '{@link #getPatterns() <em>Patterns</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPatterns()
   * @generated
   * @ordered
   */
  protected EList<Pattern> patterns;

  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<Function> functions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PackageDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProgramPackage.Literals.PACKAGE_DEF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.PACKAGE_DEF__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(String newTarget)
  {
    String oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.PACKAGE_DEF__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, ProgramPackage.PACKAGE_DEF__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Include> getIncludes()
  {
    if (includes == null)
    {
      includes = new EObjectContainmentEList<Include>(Include.class, this, ProgramPackage.PACKAGE_DEF__INCLUDES);
    }
    return includes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneratorDef getGenerator()
  {
    return generator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGenerator(GeneratorDef newGenerator, NotificationChain msgs)
  {
    GeneratorDef oldGenerator = generator;
    generator = newGenerator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ProgramPackage.PACKAGE_DEF__GENERATOR, oldGenerator, newGenerator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenerator(GeneratorDef newGenerator)
  {
    if (newGenerator != generator)
    {
      NotificationChain msgs = null;
      if (generator != null)
        msgs = ((InternalEObject)generator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ProgramPackage.PACKAGE_DEF__GENERATOR, null, msgs);
      if (newGenerator != null)
        msgs = ((InternalEObject)newGenerator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ProgramPackage.PACKAGE_DEF__GENERATOR, null, msgs);
      msgs = basicSetGenerator(newGenerator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProgramPackage.PACKAGE_DEF__GENERATOR, newGenerator, newGenerator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BufferDef> getBufferDefs()
  {
    if (bufferDefs == null)
    {
      bufferDefs = new EObjectContainmentEList<BufferDef>(BufferDef.class, this, ProgramPackage.PACKAGE_DEF__BUFFER_DEFS);
    }
    return bufferDefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ChunkType> getChunkTypes()
  {
    if (chunkTypes == null)
    {
      chunkTypes = new EObjectContainmentEList<ChunkType>(ChunkType.class, this, ProgramPackage.PACKAGE_DEF__CHUNK_TYPES);
    }
    return chunkTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Chunks> getChunkDefs()
  {
    if (chunkDefs == null)
    {
      chunkDefs = new EObjectContainmentEList<Chunks>(Chunks.class, this, ProgramPackage.PACKAGE_DEF__CHUNK_DEFS);
    }
    return chunkDefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Pattern> getPatterns()
  {
    if (patterns == null)
    {
      patterns = new EObjectContainmentEList<Pattern>(Pattern.class, this, ProgramPackage.PACKAGE_DEF__PATTERNS);
    }
    return patterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Function> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<Function>(Function.class, this, ProgramPackage.PACKAGE_DEF__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ProgramPackage.PACKAGE_DEF__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__INCLUDES:
        return ((InternalEList<?>)getIncludes()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__GENERATOR:
        return basicSetGenerator(null, msgs);
      case ProgramPackage.PACKAGE_DEF__BUFFER_DEFS:
        return ((InternalEList<?>)getBufferDefs()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__CHUNK_TYPES:
        return ((InternalEList<?>)getChunkTypes()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__CHUNK_DEFS:
        return ((InternalEList<?>)getChunkDefs()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__PATTERNS:
        return ((InternalEList<?>)getPatterns()).basicRemove(otherEnd, msgs);
      case ProgramPackage.PACKAGE_DEF__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProgramPackage.PACKAGE_DEF__NAME:
        return getName();
      case ProgramPackage.PACKAGE_DEF__TARGET:
        return getTarget();
      case ProgramPackage.PACKAGE_DEF__IMPORTS:
        return getImports();
      case ProgramPackage.PACKAGE_DEF__INCLUDES:
        return getIncludes();
      case ProgramPackage.PACKAGE_DEF__GENERATOR:
        return getGenerator();
      case ProgramPackage.PACKAGE_DEF__BUFFER_DEFS:
        return getBufferDefs();
      case ProgramPackage.PACKAGE_DEF__CHUNK_TYPES:
        return getChunkTypes();
      case ProgramPackage.PACKAGE_DEF__CHUNK_DEFS:
        return getChunkDefs();
      case ProgramPackage.PACKAGE_DEF__PATTERNS:
        return getPatterns();
      case ProgramPackage.PACKAGE_DEF__FUNCTIONS:
        return getFunctions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProgramPackage.PACKAGE_DEF__NAME:
        setName((String)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__TARGET:
        setTarget((String)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__INCLUDES:
        getIncludes().clear();
        getIncludes().addAll((Collection<? extends Include>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__GENERATOR:
        setGenerator((GeneratorDef)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__BUFFER_DEFS:
        getBufferDefs().clear();
        getBufferDefs().addAll((Collection<? extends BufferDef>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__CHUNK_TYPES:
        getChunkTypes().clear();
        getChunkTypes().addAll((Collection<? extends ChunkType>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__CHUNK_DEFS:
        getChunkDefs().clear();
        getChunkDefs().addAll((Collection<? extends Chunks>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__PATTERNS:
        getPatterns().clear();
        getPatterns().addAll((Collection<? extends Pattern>)newValue);
        return;
      case ProgramPackage.PACKAGE_DEF__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends Function>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProgramPackage.PACKAGE_DEF__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ProgramPackage.PACKAGE_DEF__TARGET:
        setTarget(TARGET_EDEFAULT);
        return;
      case ProgramPackage.PACKAGE_DEF__IMPORTS:
        getImports().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__INCLUDES:
        getIncludes().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__GENERATOR:
        setGenerator((GeneratorDef)null);
        return;
      case ProgramPackage.PACKAGE_DEF__BUFFER_DEFS:
        getBufferDefs().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__CHUNK_TYPES:
        getChunkTypes().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__CHUNK_DEFS:
        getChunkDefs().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__PATTERNS:
        getPatterns().clear();
        return;
      case ProgramPackage.PACKAGE_DEF__FUNCTIONS:
        getFunctions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProgramPackage.PACKAGE_DEF__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ProgramPackage.PACKAGE_DEF__TARGET:
        return TARGET_EDEFAULT == null ? target != null : !TARGET_EDEFAULT.equals(target);
      case ProgramPackage.PACKAGE_DEF__IMPORTS:
        return imports != null && !imports.isEmpty();
      case ProgramPackage.PACKAGE_DEF__INCLUDES:
        return includes != null && !includes.isEmpty();
      case ProgramPackage.PACKAGE_DEF__GENERATOR:
        return generator != null;
      case ProgramPackage.PACKAGE_DEF__BUFFER_DEFS:
        return bufferDefs != null && !bufferDefs.isEmpty();
      case ProgramPackage.PACKAGE_DEF__CHUNK_TYPES:
        return chunkTypes != null && !chunkTypes.isEmpty();
      case ProgramPackage.PACKAGE_DEF__CHUNK_DEFS:
        return chunkDefs != null && !chunkDefs.isEmpty();
      case ProgramPackage.PACKAGE_DEF__PATTERNS:
        return patterns != null && !patterns.isEmpty();
      case ProgramPackage.PACKAGE_DEF__FUNCTIONS:
        return functions != null && !functions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", target: ");
    result.append(target);
    result.append(')');
    return result.toString();
  }

} //PackageDefImpl
