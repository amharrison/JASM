/**
 * generated by Xtext 2.20.0
 */
package mil.navy.nrl.ncarai.jasm.program.impl;

import mil.navy.nrl.ncarai.jasm.program.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ProgramFactoryImpl extends EFactoryImpl implements ProgramFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ProgramFactory init()
  {
    try
    {
      ProgramFactory theProgramFactory = (ProgramFactory)EPackage.Registry.INSTANCE.getEFactory(ProgramPackage.eNS_URI);
      if (theProgramFactory != null)
      {
        return theProgramFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ProgramFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProgramFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ProgramPackage.PROGRAM: return createProgram();
      case ProgramPackage.PACKAGE_DEF: return createPackageDef();
      case ProgramPackage.INCLUDE: return createInclude();
      case ProgramPackage.BUFFER_DEF: return createBufferDef();
      case ProgramPackage.REQUEST_DEF: return createRequestDef();
      case ProgramPackage.GENERATOR_DEF: return createGeneratorDef();
      case ProgramPackage.PATTERN: return createPattern();
      case ProgramPackage.FUNCTION: return createFunction();
      case ProgramPackage.WITH_AS_STATEMENT: return createWithAsStatement();
      case ProgramPackage.RETAIN_AS_STATEMENT: return createRetainAsStatement();
      case ProgramPackage.AS_STATEMENT: return createAsStatement();
      case ProgramPackage.VARIABLE_STATEMENT: return createVariableStatement();
      case ProgramPackage.BLOCK: return createBlock();
      case ProgramPackage.INSERTION_STATEMENT: return createInsertionStatement();
      case ProgramPackage.INSTRUCTION: return createInstruction();
      case ProgramPackage.FUNCTION_CALL_STATEMENT: return createFunctionCallStatement();
      case ProgramPackage.ASSIGNMENT_STATEMENT: return createAssignmentStatement();
      case ProgramPackage.VARIABLE_REFERENCE: return createVariableReference();
      case ProgramPackage.VARIABLE_VALUE: return createVariableValue();
      case ProgramPackage.RETURN_VARIABLE_REFERENCE: return createReturnVariableReference();
      case ProgramPackage.RETURN_STATEMENT: return createReturnStatement();
      case ProgramPackage.REMOVE_STATEMENT: return createRemoveStatement();
      case ProgramPackage.REQUEST_STATEMENT: return createRequestStatement();
      case ProgramPackage.REPEAT_UNTIL_STATEMENT: return createRepeatUntilStatement();
      case ProgramPackage.UNTIL_REPEAT_STATEMENT: return createUntilRepeatStatement();
      case ProgramPackage.WHILE_DO_STATEMENT: return createWhileDoStatement();
      case ProgramPackage.DO_WHILE_STATEMENT: return createDoWhileStatement();
      case ProgramPackage.REPEAT: return createRepeat();
      case ProgramPackage.REWARD_STATEMENT: return createRewardStatement();
      case ProgramPackage.UNTIL: return createUntil();
      case ProgramPackage.WHILE: return createWhile();
      case ProgramPackage.MATCH_STATEMENT: return createMatchStatement();
      case ProgramPackage.CASE_STATEMENT: return createCaseStatement();
      case ProgramPackage.OUTPUT_STATEMENT: return createOutputStatement();
      case ProgramPackage.FOR_LOOP_STATEMENT: return createForLoopStatement();
      case ProgramPackage.IF_THEN_ELSE_STATEMENT: return createIfThenElseStatement();
      case ProgramPackage.BINDINGS: return createBindings();
      case ProgramPackage.BUFFER_PATTERN: return createBufferPattern();
      case ProgramPackage.MAPPING: return createMapping();
      case ProgramPackage.HANDLER: return createHandler();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Program createProgram()
  {
    ProgramImpl program = new ProgramImpl();
    return program;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PackageDef createPackageDef()
  {
    PackageDefImpl packageDef = new PackageDefImpl();
    return packageDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BufferDef createBufferDef()
  {
    BufferDefImpl bufferDef = new BufferDefImpl();
    return bufferDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequestDef createRequestDef()
  {
    RequestDefImpl requestDef = new RequestDefImpl();
    return requestDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneratorDef createGeneratorDef()
  {
    GeneratorDefImpl generatorDef = new GeneratorDefImpl();
    return generatorDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WithAsStatement createWithAsStatement()
  {
    WithAsStatementImpl withAsStatement = new WithAsStatementImpl();
    return withAsStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RetainAsStatement createRetainAsStatement()
  {
    RetainAsStatementImpl retainAsStatement = new RetainAsStatementImpl();
    return retainAsStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AsStatement createAsStatement()
  {
    AsStatementImpl asStatement = new AsStatementImpl();
    return asStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableStatement createVariableStatement()
  {
    VariableStatementImpl variableStatement = new VariableStatementImpl();
    return variableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InsertionStatement createInsertionStatement()
  {
    InsertionStatementImpl insertionStatement = new InsertionStatementImpl();
    return insertionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallStatement createFunctionCallStatement()
  {
    FunctionCallStatementImpl functionCallStatement = new FunctionCallStatementImpl();
    return functionCallStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignmentStatement createAssignmentStatement()
  {
    AssignmentStatementImpl assignmentStatement = new AssignmentStatementImpl();
    return assignmentStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableReference createVariableReference()
  {
    VariableReferenceImpl variableReference = new VariableReferenceImpl();
    return variableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValue createVariableValue()
  {
    VariableValueImpl variableValue = new VariableValueImpl();
    return variableValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnVariableReference createReturnVariableReference()
  {
    ReturnVariableReferenceImpl returnVariableReference = new ReturnVariableReferenceImpl();
    return returnVariableReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveStatement createRemoveStatement()
  {
    RemoveStatementImpl removeStatement = new RemoveStatementImpl();
    return removeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequestStatement createRequestStatement()
  {
    RequestStatementImpl requestStatement = new RequestStatementImpl();
    return requestStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RepeatUntilStatement createRepeatUntilStatement()
  {
    RepeatUntilStatementImpl repeatUntilStatement = new RepeatUntilStatementImpl();
    return repeatUntilStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UntilRepeatStatement createUntilRepeatStatement()
  {
    UntilRepeatStatementImpl untilRepeatStatement = new UntilRepeatStatementImpl();
    return untilRepeatStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileDoStatement createWhileDoStatement()
  {
    WhileDoStatementImpl whileDoStatement = new WhileDoStatementImpl();
    return whileDoStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoWhileStatement createDoWhileStatement()
  {
    DoWhileStatementImpl doWhileStatement = new DoWhileStatementImpl();
    return doWhileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repeat createRepeat()
  {
    RepeatImpl repeat = new RepeatImpl();
    return repeat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RewardStatement createRewardStatement()
  {
    RewardStatementImpl rewardStatement = new RewardStatementImpl();
    return rewardStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Until createUntil()
  {
    UntilImpl until = new UntilImpl();
    return until;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public While createWhile()
  {
    WhileImpl while_ = new WhileImpl();
    return while_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MatchStatement createMatchStatement()
  {
    MatchStatementImpl matchStatement = new MatchStatementImpl();
    return matchStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseStatement createCaseStatement()
  {
    CaseStatementImpl caseStatement = new CaseStatementImpl();
    return caseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OutputStatement createOutputStatement()
  {
    OutputStatementImpl outputStatement = new OutputStatementImpl();
    return outputStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForLoopStatement createForLoopStatement()
  {
    ForLoopStatementImpl forLoopStatement = new ForLoopStatementImpl();
    return forLoopStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfThenElseStatement createIfThenElseStatement()
  {
    IfThenElseStatementImpl ifThenElseStatement = new IfThenElseStatementImpl();
    return ifThenElseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Bindings createBindings()
  {
    BindingsImpl bindings = new BindingsImpl();
    return bindings;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BufferPattern createBufferPattern()
  {
    BufferPatternImpl bufferPattern = new BufferPatternImpl();
    return bufferPattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Handler createHandler()
  {
    HandlerImpl handler = new HandlerImpl();
    return handler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProgramPackage getProgramPackage()
  {
    return (ProgramPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ProgramPackage getPackage()
  {
    return ProgramPackage.eINSTANCE;
  }

} //ProgramFactoryImpl
