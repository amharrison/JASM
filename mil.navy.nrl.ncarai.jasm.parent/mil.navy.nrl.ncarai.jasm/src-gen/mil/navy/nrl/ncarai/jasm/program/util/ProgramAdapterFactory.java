/**
 * generated by Xtext 2.20.0
 */
package mil.navy.nrl.ncarai.jasm.program.util;

import mil.navy.nrl.ncarai.jasm.program.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see mil.navy.nrl.ncarai.jasm.program.ProgramPackage
 * @generated
 */
public class ProgramAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ProgramPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProgramAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ProgramPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProgramSwitch<Adapter> modelSwitch =
    new ProgramSwitch<Adapter>()
    {
      @Override
      public Adapter caseProgram(Program object)
      {
        return createProgramAdapter();
      }
      @Override
      public Adapter casePackageDef(PackageDef object)
      {
        return createPackageDefAdapter();
      }
      @Override
      public Adapter caseInclude(Include object)
      {
        return createIncludeAdapter();
      }
      @Override
      public Adapter caseBufferDef(BufferDef object)
      {
        return createBufferDefAdapter();
      }
      @Override
      public Adapter caseRequestDef(RequestDef object)
      {
        return createRequestDefAdapter();
      }
      @Override
      public Adapter caseGeneratorDef(GeneratorDef object)
      {
        return createGeneratorDefAdapter();
      }
      @Override
      public Adapter casePattern(Pattern object)
      {
        return createPatternAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseWithAsStatement(WithAsStatement object)
      {
        return createWithAsStatementAdapter();
      }
      @Override
      public Adapter caseRetainAsStatement(RetainAsStatement object)
      {
        return createRetainAsStatementAdapter();
      }
      @Override
      public Adapter caseAsStatement(AsStatement object)
      {
        return createAsStatementAdapter();
      }
      @Override
      public Adapter caseVariableStatement(VariableStatement object)
      {
        return createVariableStatementAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseInsertionStatement(InsertionStatement object)
      {
        return createInsertionStatementAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseFunctionCallStatement(FunctionCallStatement object)
      {
        return createFunctionCallStatementAdapter();
      }
      @Override
      public Adapter caseAssignmentStatement(AssignmentStatement object)
      {
        return createAssignmentStatementAdapter();
      }
      @Override
      public Adapter caseVariableReference(VariableReference object)
      {
        return createVariableReferenceAdapter();
      }
      @Override
      public Adapter caseVariableValue(VariableValue object)
      {
        return createVariableValueAdapter();
      }
      @Override
      public Adapter caseReturnVariableReference(ReturnVariableReference object)
      {
        return createReturnVariableReferenceAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseRemoveStatement(RemoveStatement object)
      {
        return createRemoveStatementAdapter();
      }
      @Override
      public Adapter caseRequestStatement(RequestStatement object)
      {
        return createRequestStatementAdapter();
      }
      @Override
      public Adapter caseRepeatUntilStatement(RepeatUntilStatement object)
      {
        return createRepeatUntilStatementAdapter();
      }
      @Override
      public Adapter caseUntilRepeatStatement(UntilRepeatStatement object)
      {
        return createUntilRepeatStatementAdapter();
      }
      @Override
      public Adapter caseWhileDoStatement(WhileDoStatement object)
      {
        return createWhileDoStatementAdapter();
      }
      @Override
      public Adapter caseDoWhileStatement(DoWhileStatement object)
      {
        return createDoWhileStatementAdapter();
      }
      @Override
      public Adapter caseRepeat(Repeat object)
      {
        return createRepeatAdapter();
      }
      @Override
      public Adapter caseRewardStatement(RewardStatement object)
      {
        return createRewardStatementAdapter();
      }
      @Override
      public Adapter caseUntil(Until object)
      {
        return createUntilAdapter();
      }
      @Override
      public Adapter caseWhile(While object)
      {
        return createWhileAdapter();
      }
      @Override
      public Adapter caseMatchStatement(MatchStatement object)
      {
        return createMatchStatementAdapter();
      }
      @Override
      public Adapter caseCaseStatement(CaseStatement object)
      {
        return createCaseStatementAdapter();
      }
      @Override
      public Adapter caseOutputStatement(OutputStatement object)
      {
        return createOutputStatementAdapter();
      }
      @Override
      public Adapter caseForLoopStatement(ForLoopStatement object)
      {
        return createForLoopStatementAdapter();
      }
      @Override
      public Adapter caseIfThenElseStatement(IfThenElseStatement object)
      {
        return createIfThenElseStatementAdapter();
      }
      @Override
      public Adapter caseBindings(Bindings object)
      {
        return createBindingsAdapter();
      }
      @Override
      public Adapter caseBufferPattern(BufferPattern object)
      {
        return createBufferPatternAdapter();
      }
      @Override
      public Adapter caseMapping(Mapping object)
      {
        return createMappingAdapter();
      }
      @Override
      public Adapter caseHandler(Handler object)
      {
        return createHandlerAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Program <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Program
   * @generated
   */
  public Adapter createProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.PackageDef <em>Package Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.PackageDef
   * @generated
   */
  public Adapter createPackageDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Include <em>Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Include
   * @generated
   */
  public Adapter createIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.BufferDef <em>Buffer Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.BufferDef
   * @generated
   */
  public Adapter createBufferDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RequestDef <em>Request Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RequestDef
   * @generated
   */
  public Adapter createRequestDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.GeneratorDef <em>Generator Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.GeneratorDef
   * @generated
   */
  public Adapter createGeneratorDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Pattern <em>Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Pattern
   * @generated
   */
  public Adapter createPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.WithAsStatement <em>With As Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.WithAsStatement
   * @generated
   */
  public Adapter createWithAsStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RetainAsStatement <em>Retain As Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RetainAsStatement
   * @generated
   */
  public Adapter createRetainAsStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.AsStatement <em>As Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.AsStatement
   * @generated
   */
  public Adapter createAsStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.VariableStatement <em>Variable Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.VariableStatement
   * @generated
   */
  public Adapter createVariableStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.InsertionStatement <em>Insertion Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.InsertionStatement
   * @generated
   */
  public Adapter createInsertionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.FunctionCallStatement <em>Function Call Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.FunctionCallStatement
   * @generated
   */
  public Adapter createFunctionCallStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.AssignmentStatement <em>Assignment Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.AssignmentStatement
   * @generated
   */
  public Adapter createAssignmentStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.VariableReference <em>Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.VariableReference
   * @generated
   */
  public Adapter createVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.VariableValue <em>Variable Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.VariableValue
   * @generated
   */
  public Adapter createVariableValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.ReturnVariableReference <em>Return Variable Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.ReturnVariableReference
   * @generated
   */
  public Adapter createReturnVariableReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RemoveStatement <em>Remove Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RemoveStatement
   * @generated
   */
  public Adapter createRemoveStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RequestStatement <em>Request Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RequestStatement
   * @generated
   */
  public Adapter createRequestStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RepeatUntilStatement <em>Repeat Until Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RepeatUntilStatement
   * @generated
   */
  public Adapter createRepeatUntilStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.UntilRepeatStatement <em>Until Repeat Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.UntilRepeatStatement
   * @generated
   */
  public Adapter createUntilRepeatStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.WhileDoStatement <em>While Do Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.WhileDoStatement
   * @generated
   */
  public Adapter createWhileDoStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.DoWhileStatement <em>Do While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.DoWhileStatement
   * @generated
   */
  public Adapter createDoWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Repeat <em>Repeat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Repeat
   * @generated
   */
  public Adapter createRepeatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.RewardStatement <em>Reward Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.RewardStatement
   * @generated
   */
  public Adapter createRewardStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Until <em>Until</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Until
   * @generated
   */
  public Adapter createUntilAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.While <em>While</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.While
   * @generated
   */
  public Adapter createWhileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.MatchStatement <em>Match Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.MatchStatement
   * @generated
   */
  public Adapter createMatchStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.CaseStatement <em>Case Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.CaseStatement
   * @generated
   */
  public Adapter createCaseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.OutputStatement <em>Output Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.OutputStatement
   * @generated
   */
  public Adapter createOutputStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.ForLoopStatement <em>For Loop Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.ForLoopStatement
   * @generated
   */
  public Adapter createForLoopStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.IfThenElseStatement <em>If Then Else Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.IfThenElseStatement
   * @generated
   */
  public Adapter createIfThenElseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Bindings <em>Bindings</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Bindings
   * @generated
   */
  public Adapter createBindingsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.BufferPattern <em>Buffer Pattern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.BufferPattern
   * @generated
   */
  public Adapter createBufferPatternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Mapping <em>Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Mapping
   * @generated
   */
  public Adapter createMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link mil.navy.nrl.ncarai.jasm.program.Handler <em>Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see mil.navy.nrl.ncarai.jasm.program.Handler
   * @generated
   */
  public Adapter createHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ProgramAdapterFactory
