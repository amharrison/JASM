/**
 * generated by Xtext 2.19.0
 */
package mil.navy.nrl.ncarai.jasm;

import com.google.inject.Binder;
import com.google.inject.Provider;
import com.google.inject.name.Names;
import mil.navy.nrl.ncarai.jasm.AbstractProgramRuntimeModule;
import mil.navy.nrl.ncarai.jasm.jactrio2.IModelBuilder;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.DefaultProceduralModelBuilder;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.IGoalManipulator;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.IReferenceResolver;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.impl.DefaultGoalManipulator;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.impl.DefaultReferenceResolver;
import mil.navy.nrl.ncarai.jasm.jactrio2.procedural.impl.InstructionDispatcher;
import mil.navy.nrl.ncarai.jasm.scoping.GlobalImplicitImportManager;
import mil.navy.nrl.ncarai.jasm.scoping.LocalScopingProvider;
import mil.navy.nrl.ncarai.jasm.validation.ValidationUtilities;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.jactr.io2.jactr.naming.QualifiedNameProvider;
import org.jactr.io2.jactr.util.LoadDelegate;
import org.jactr.io2.jactr.validation.DefaultClassNameValidator;
import org.jactr.io2.jactr.validation.IClassNameValidator;
import org.jactr.io2.jactr.validation.ModelFragmentUtil;
import org.jactr.io2.jactr.value.ModelFragmentConverters;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class ProgramRuntimeModule extends AbstractProgramRuntimeModule {
  public Class<ModelFragmentUtil> bindModelFragmentUtil() {
    return ModelFragmentUtil.class;
  }
  
  public Class<? extends IClassNameValidator> bindIClassNameValidator() {
    return DefaultClassNameValidator.class;
  }
  
  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
    return QualifiedNameProvider.class;
  }
  
  public Class<? extends IGoalManipulator> bindIGoalManipulator() {
    return DefaultGoalManipulator.class;
  }
  
  public Provider<? extends String> provideGlobalImplicitImportManager() {
    return new GlobalImplicitImportManager();
  }
  
  public Class<? extends InstructionDispatcher> bindInstructionDispatcher() {
    return InstructionDispatcher.class;
  }
  
  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return ModelFragmentConverters.class;
  }
  
  public Class<? extends IModelBuilder> bindIModelBuilder() {
    return DefaultProceduralModelBuilder.class;
  }
  
  public Class<? extends IReferenceResolver> bindIReferenceResolver() {
    return DefaultReferenceResolver.class;
  }
  
  @Override
  public void configureIScopeProviderDelegate(final Binder binder) {
    binder.<IScopeProvider>bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(
      LocalScopingProvider.class);
  }
  
  public Class<? extends ValidationUtilities> bindValidationUtilities() {
    return ValidationUtilities.class;
  }
  
  public Class<? extends LoadDelegate> bindLoadDelegate() {
    return LoadDelegate.class;
  }
}
