/*
 * 
 */
namespace jasm.declarative.RepeatUntil{

import jactr.declarative.*
import jactr.procedural.*
import jactr.retrieval.*
import jactr.imaginal.*
import jactr.visual.*
import jactr.aural.*
import jactr.meta.*
import jactr.goal.*

import jasm.declarative.Goal.*
import jasm.declarative.MapRetrieval.*


module "org.jactr.core.module.declarative.six.DefaultDeclarativeModule6" [
  "ActivationNoise"          : "0"
  "BaseLevelConstant"        : "0"
  "EnablePartialMatching"    : "false"
  "MaximumDifference"        : "-1"
  "MaximumSimilarity"        : "0"
  "MismatchPenalty"          : "1"
  "PermanentActivationNoise" : "0"]
module "org.jactr.core.module.procedural.six.DefaultProceduralModule6" [
  "DefaultProductionFiringTime" : "0.05"
  "ExpectedUtilityNoise"        : "0"
  "NumberOfProductionsFired"    : "0" ]
module "org.jactr.core.module.goal.six.DefaultGoalModule6" []
module "org.jactr.core.module.retrieval.six.DefaultRetrievalModule6" [
  "EnableIndexedRetrievals" : "false"
  "FINSTDurationTime"       : "30.0"
  "LatencyFactor"           : "1"
  "NumberOfFINSTs"          : "4"
  "RetrievalThreshold"      : "0" ]
module "org.jactr.core.module.meta.MetaModule"[]
module "org.jactr.modules.pm.aural.six.DefaultAuralModule6"[]
module "org.jactr.modules.pm.visual.six.DefaultVisualModule6"[]

/* 
 * common buffers
 */
buffers {
}


stages request-then, request-else, actual-test, then-action, else-action, actual-execution

/*
 * if then else construct. if condition-buffer is retrieval we need to 
 * reinstate the retrieval which is assumed to be goal.parameter. 
 * condition defines a request specification, optionally with associated
 * conditions. 
 * 
 * condition-request, then-action, and else-action are all requests built
 * with the meta buffer. They must be defined before the condition is tested
 * in case retrieval is required. The else, and else-action are optional
 */
chunk ifThenElseHint
chunktype IfThenElse extends Goal{
  hint              = ifThenElseHint
  condition-buffer  = "goal"
  condition         = null // request spec
  condition-request = null // pattern
  then              = null // goal actions
  then-action       = null // request pattern 
  else              = null // goal actions
  else-action       = null // request pattern
  end-reached       = false // marker slot for list processing
}

chunk repeatUntilHint
chunktype RepeatUntil extends Goal{
  hint             = repeatUntilHint
  block            = null // goal short spec
  condition        = null // long spec
  condition-buffer = "goal"
}


/*********************************
 * 
 * repeat-until productions. First
 * we fire off the block goal, after
 * it returns we assign the goal 
 * return to parameter then start to
 * build the condition. 
 * 
 * 
 * 
 *********************************/
/*
 * ru-FireAction-start 
 * 
 */
production ru-FireAction-start {
  goal{
    isa RepeatUntil
    stage     =  starting
    block     =  =block
    parameter =  =parameter
  }
}{
  goal{
    stage = actual-execution
  }
  +goal{
    =block
    parent    =  =goal
    parameter =  =parameter
  }
}

production ru-FireAction-start-null {
  goal{
    isa RepeatUntil
    stage     =  starting
    block     =  =block
    parameter =  null
  }
}{
  goal{
    stage = actual-execution
  }
  +goal{
    =block
    parent =  =goal
  }
}


/*
 * ru-BuildCondition-start 
 * 
 */
production ru-BuildCondition-start {
  goal{
    isa RepeatUntil
    stage     =  actual-execution
    return    =  =returnValue
    condition =  =initialSpec // listelement
  }
  ?retrieval{
    state != busy
  }
}{
  goal{
    parameter = =returnValue
    stage     = request-request
  }
//  +meta{
//    =initialSpec
//  }
//  +retrieval{
//    isa condition
//    reference           =  =initialSpec
//    :recently-retrieved =  false
//  }
  +retrieval{
    =initialSpec
  }
}


/*
 * ru-BuildCondition-subsequent 
 * 
 */
production ru-BuildCondition-subsequent {
  goal{
    isa RepeatUntil
    stage =  request-request
  }
  retrieval{
    isa ListElement
    item =  =spec
  }
}{
  +meta{
    =spec
  }
  +retrieval{
    isa ListElement
    prior =  =retrieval
  }
  goal{}
}["Utility" : -1]

production ru-BuildCondition-terminal {
  goal{
    isa RepeatUntil
    stage =  request-request
  }
  retrieval{
    isa LastListElement
    item =  =spec
  }
}{
  +meta{
    =spec
  }
  goal{
    stage = actual-request
  }
}

/*
 * ru-BuildConditional-terminal 
 * 
 */
production ru-BuildConditional-terminal-retr-error {
  goal{
    isa RepeatUntil
    stage =  request-request
  }
  ?retrieval{
    state =  error
  }
}{
  goal{
    stage = actual-request
  }
}


/*
 * ru-TestCondition-goal 
 * 
 */
production ru-TestCondition-goal {
  goal{
    isa RepeatUntil
    stage            =  actual-request
    condition-buffer =  "goal"
  }
  meta{
    =meta
  }
  goal{
    =meta
  }
}{
  goal{
    stage = completed
  }
  -meta{}
}

production ru-TestCondition-fallthrough{
  goal{
    isa RepeatUntil
    stage =  actual-request
  }
}{
  goal{
    stage = starting // retart
  }
}["Utility" : -1]


/*********************************
 * 
 *  if-then-else productions.
 *  First, we build condition-request, then-action, 
 *  and, if else is present, else-action. Then we 
 *  apply the condition to the condition-buffer 
 *  (different productions for each buffer). 
 * 
 *  if the condition matches, we fire then-action, and null
 *  the condition-request and -actions. 
 *  
 *  the else is handled by a fall through, low utility
 *  production, which also nulls -request and -actions.
 * 
 **********************************/
production ite-BuildCondition-start {
  goal{
    isa IfThenElse
    condition =  =initialItem
    stage     =  starting
  }
  ?retrieval{
    state != busy
  }
}{
  goal{
    stage = request-request
  }
  +retrieval{
    =initialItem
  }
}

production ite-BuildCondition-subsequent{
  goal{
    isa IfThenElse
    condition =  =currentSpec
    stage     =  request-request
  }
  retrieval{
    isa ListElement
    item =  =spec
  }
}{
  /*
   * will copy =slotName = =value
   */
  +meta{
    =spec
  }
  +retrieval{
    isa ListElement
    prior =  =retrieval
  }
  goal{}
}["Utility" : "-1"]


production ite-BuildCondition-terminal{
  goal{
    isa IfThenElse
    condition   =  =currentSpec
    stage       =  request-request
    end-reached =  false
  }
  retrieval{
    isa LastListElement
    item =  =spec
  }
}{
  goal{
    end-reached = true
  }
  +meta{
    =spec
  }
}

production ite-BuildCondition-terminal-error{
  goal{
    isa IfThenElse
    condition   =  =currentSpec
    stage       =  request-request
    end-reached =  false
  }
  ?retrieval{
    state =  error
  }
}{
  goal{
    end-reached = true
  }
}


production ite-BuildThen-start{
  goal{
    isa IfThenElse
    stage       =  request-request
    then        =  =thenSpec
    end-reached =  true
  }
  meta{
    =meta
  }
}{
  goal{
    stage             = request-then
    condition-request = =meta
    end-reached       = false
  }
  +meta{
    =thenSpec
  }
}


production ite-BuildThen-terminal{
  goal{
    isa IfThenElse
    then  =  =currentSpec
    stage =  request-then
    else  =  =elseSpec
  }
  meta{
    =meta
  }
}{
  goal{
    stage       = request-else
    then-action = =meta
  }
  +meta{
    =elseSpec
  }
}


production ite-BuildThen-terminal-null{
  goal{
    isa IfThenElse
    then  =  =currentSpec
    stage =  request-then
    else  =  null
  }
  meta{
    =meta
  }
}{
  goal{
    stage       = actual-test
    then-action = =meta
  }
}


production ite-BuildElse-terminal{
  goal{
    isa IfThenElse
    else  =  =currentSpec
    stage =  request-else
  }
  meta{
    =meta
  }
}{
  goal{
    stage       = actual-test
    else-action = =meta
  }
}

/*
 * the condition execution productions are unique per buffer
 * 
 */
production ite-TestConditionThen-goal{
  goal{
    isa IfThenElse
    stage             =  actual-test
    condition-buffer  =  "goal"
    condition-request =  =conditionRequest
  }
  goal{
    =conditionRequest
  }
}{
  goal{
    condition-request = null // so we don't pollute
    stage             = then-action
  }
}

production ite-TestConditionElse-fallthrough{
  goal{
    isa IfThenElse
    stage =  actual-test
  }
}{
  goal{
    condition-request = null
    stage             = else-action
  }
}["Utility" : -1]


/*
 * actually execute then and else
 */
production ite-FireThen-start{
  goal{
    isa IfThenElse
    stage       =  then-action
    then-action =  =action
    parameter   =  =parameter
  }
}{
  goal{
    stage       = actual-execution
    then-action = null // to not pollute DM
    else-action = null
  }
  +goal{
    =action
    parent    =  =goal
    parameter =  =parameter
  }
}

production ite-FireThen-start-null{
  goal{
    isa IfThenElse
    stage       =  then-action
    then-action =  =action
    parameter   =  null
  }
}{
  goal{
    stage       = actual-execution
    then-action = null // to not pollute DM
    else-action = null
  }
  +goal{
    =action
    parent =  =goal
  }
}


production ite-FireElse-start{
  goal{
    isa IfThenElse
    stage       =  else-action
    else-action =  =action
    parameter   =  =parameter
  }
}{
  goal{
    stage       = actual-execution
    then-action = null // to not pollute DM
    else-action = null
  }
  +goal{
    =action
    parent    =  =goal
    parameter =  =parameter
  }
}

production ite-FireElse-start-null{
  goal{
    isa IfThenElse
    stage       =  else-action
    else-action =  =action
    parameter   =  null
  }
}{
  goal{
    stage       = actual-execution
    then-action = null // to not pollute DM
    else-action = null
  }
  +goal{
    =action
    parent =  =goal
  }
}


production ite-FireElse-noop{
  goal{
    isa IfThenElse
    stage       =  else-action
    else-action =  null
  }
}{
  goal{
    stage       = actual-execution
    then-action = null // to not pollute DM
    else-action = null
  }
}

production ite-FireComplete-return{
  goal{
    isa IfThenElse
    stage  =  actual-execution
    return =  =return
  }
}{
  goal{
    stage     = completed
    parameter = =return
    return    = =return
  }
}

production ite-FireComplete-null{
  goal{
    isa IfThenElse
    stage     =  actual-execution
    return    =  null
    parameter =  =return
  }
}{
  goal{
    stage     = completed
    parameter = =return
    return    = =return
  }
}

}
