namespace sperling.sperlingTest target sperling.sperling{
import jactr.declarative.*
import jactr.procedural.*
import jactr.retrieval.*
import jactr.imaginal.*
import jactr.visual.*
import jactr.aural.*
import jactr.vocal.*
import jactr.goal.*
import jasm.procedural.Goal.*

chunktype Association {
  one = null 
  two = null
}
 
visual-location low(screen-x=-5, screen-y=-5), mid(screen-x=-5, screen-y=0), high(screen-x=-5, screen-y=5)
Association lowTone(one=100.0, two=low), midTone(one=1000.0, two=mid), highTone(one=10000.0, two=high)

unattendedAural = {
  isa audio-event
  kind      =  tone
  :attended != true
}

anyAural = {
  isa audio-event
}

initialBinding = {
  isa sperling
  parameter =  =parameter
}

unattendedVisual = {
  isa visual-location
  kind      =  text
  nearest   =  =parameter
  :attended != true
}

anyVisLoc = {
  isa visual-location
}

nextBinding = {
  isa sperling
  parameter =  =parameter
}

nextUnattendedVisual = {
  isa visual-location
  kind      =  text
  screen-x  > current
  nearest   =  current
  :attended != true
}

sperlingParamNotFailed = {
  isa sperling
  parameter != failed
}

sperlingParamIsFailed = {
  isa sperling
  parameter =  failed
}

parameterQuery = {
  isa sperling
  parameter =  =parameter
}

sperlingToneBinding = {
  isa sperling
  parameter =  =parameter
}
moveVisualAttention = {
  isa attend-to
  where =  =visual-location
}
moveAttention = {
  isa attend-to
  where =  =parameter
}
mapBinding = {
  isa sperling
  parameter =  =parameter
}
mapAssociation = {
  isa Association
  one =  =parameter
}

auralPitch = {
  isa tone
  pitch =  =value
}

retrievalTwo = {
  isa Association
  two =  =value
}

/*
 * wait for a tone to occur
 */
function void sperling(){
  slot parameter = failed

  do{
      /* 
       * search for a tone 
       */
    request aural-location(unattendedAural)as audio-event
      -> parameter = aural-location
      => {
      parameter=failed
    }

      /*
       * tone was found, attend to it 
       */
    if(goal(sperlingParamNotFailed)){
      request aural(moveAttention), goal(sperlingToneBinding) as tone
        -> parameter = aural.pitch 
        => {
        parameter = failed
      }
    }
  }while(goal(sperlingParamIsFailed))
    /*
     * map tone to visual-location
     */
  if(goal(sperlingParamNotFailed)){
    request retrieval(mapAssociation), goal(mapBinding) as Association
      -> parameter = retrieval.two
      => {
      parameter = failed
    }
  }

    /*  
     * look for all the objects closest to visual-location 
     */
  for(visual-location,
    unattendedVisual, goal(initialBinding),
    nextUnattendedVisual, goal(nextBinding)){
    request visual(moveVisualAttention),
            visual-location(anyVisLoc) as text
      -> parameter = visual
         
   if(goal(sperlingParamNotFailed)){
      output("I see =parameter",goal(parameterQuery))
    }
  }
  return
} 
 



}


